{
  "_args": [
    [
      {
        "raw": "jbuilder-actual@git://github.com/npm-opam/jbuilder.git#1.0.02",
        "scope": null,
        "escapedName": "jbuilder-actual",
        "name": "jbuilder-actual",
        "rawSpec": "git://github.com/npm-opam/jbuilder.git#1.0.02",
        "spec": "git://github.com/npm-opam/jbuilder.git#1.0.02",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:npm-opam/jbuilder.git#1.0.02",
          "sshUrl": "git+ssh://git@github.com/npm-opam/jbuilder.git#1.0.02",
          "httpsUrl": "git+https://github.com/npm-opam/jbuilder.git#1.0.02",
          "gitUrl": "git://github.com/npm-opam/jbuilder.git#1.0.02",
          "shortcut": "github:npm-opam/jbuilder#1.0.02",
          "directUrl": "https://raw.githubusercontent.com/npm-opam/jbuilder/1.0.02/package.json"
        }
      },
      "/Users/ryan/Personal/proj/bs-node-http-server/node_modules/@opam-alpha/jbuilder"
    ]
  ],
  "_from": "git://github.com/npm-opam/jbuilder.git#1ba5e02d493fc3acd34eeb5c7497773a7d772a1a",
  "_id": "jbuilder-actual@1.0.2",
  "_inCache": true,
  "_location": "/jbuilder-actual",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jbuilder-actual@git://github.com/npm-opam/jbuilder.git#1.0.02",
    "scope": null,
    "escapedName": "jbuilder-actual",
    "name": "jbuilder-actual",
    "rawSpec": "git://github.com/npm-opam/jbuilder.git#1.0.02",
    "spec": "git://github.com/npm-opam/jbuilder.git#1.0.02",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:npm-opam/jbuilder.git#1.0.02",
      "sshUrl": "git+ssh://git@github.com/npm-opam/jbuilder.git#1.0.02",
      "httpsUrl": "git+https://github.com/npm-opam/jbuilder.git#1.0.02",
      "gitUrl": "git://github.com/npm-opam/jbuilder.git#1.0.02",
      "shortcut": "github:npm-opam/jbuilder#1.0.02",
      "directUrl": "https://raw.githubusercontent.com/npm-opam/jbuilder/1.0.02/package.json"
    }
  },
  "_requiredBy": [
    "/@opam-alpha/jbuilder"
  ],
  "_resolved": "git://github.com/npm-opam/jbuilder.git#1ba5e02d493fc3acd34eeb5c7497773a7d772a1a",
  "_shasum": "b7c6ac9e9a95c04aa23a8c9553a178b8d17493aa",
  "_shrinkwrap": null,
  "_spec": "jbuilder-actual@git://github.com/npm-opam/jbuilder.git#1.0.02",
  "_where": "/Users/ryan/Personal/proj/bs-node-http-server/node_modules/@opam-alpha/jbuilder",
  "dependencies": {
    "dependency-env": "*",
    "nopam": "*",
    "opam-installer-bin": "git+https://github.com/yunxing/opam-installer-bin.git",
    "substs": "git+https://github.com/yunxing/substs.git"
  },
  "description": "* JBUILDER - A composable build system for OCaml",
  "devDependencies": {},
  "exportedEnvVars": {
    "jbuilder_version": {
      "global": true,
      "globalCollisionBehavior": "clobber",
      "val": "1.0.02"
    },
    "CAML_LD_LIBRARY_PATH": {
      "global": true,
      "resolveAsRelativePath": true,
      "globalCollisionBehavior": "joinPath",
      "val": "./_build/ocamlfind/lib/stublibs"
    },
    "FINDLIB": {
      "global": true,
      "resolveAsRelativePath": true,
      "globalCollisionBehavior": "joinPath",
      "val": "./_build/ocamlfind/lib"
    },
    "jbuilder_installed": {
      "global": true,
      "globalCollisionBehavior": "clobber",
      "val": "true"
    },
    "version": {
      "global": true,
      "globalCollisionBehavior": "clobber",
      "val": "1.0.02"
    },
    "PATH": {
      "global": true,
      "resolveAsRelativePath": true,
      "globalCollisionBehavior": "joinPath",
      "val": "./_build/ocamlfind/bin"
    },
    "jbuilder_enable": {
      "global": true,
      "globalCollisionBehavior": "clobber",
      "val": "enable"
    }
  },
  "gitHead": "1ba5e02d493fc3acd34eeb5c7497773a7d772a1a",
  "name": "jbuilder-actual",
  "optionalDependencies": {},
  "peerDependencies": {
    "@opam-alpha/ocaml": ">= 4.02.3"
  },
  "readme": "* JBUILDER - A composable build system for OCaml\n\nJbuilder is a build system designed for OCaml projects only. It\nfocuses on providing the user with a consistent experience and takes\ncare of most of the low-level details of OCaml compilation. All you\nhave to do is provide a description of your project and Jbuilder will\ndo the rest.\n\nThe scheme it implements is inspired from the one used inside Jane\nStreet and adapted to the open source world. It has matured over a\nlong time and is used daily by hundred of developpers, which means\nthat it is highly tested and productive.\n\nJbuilder comes with a [[./doc/manual.org][manual]]. If you want to get started without\nreading too much, you can look at the [[./doc/quick-start.org][quick start guide]].\n\n[[https://travis-ci.org/janestreet/jbuilder][https://travis-ci.org/janestreet/jbuilder.png?branch=master]]\n\n** Overview\n\nJbuilder reads project metadata from =jbuild= files, which are either\nstatic files in a simple S-expression syntax or OCaml scripts. It uses\nthis information to setup build rules, generate configuration files\nfor development tools such as [[https://github.com/ocaml/merlin][merlin]], handle installation, etc...\n\nJbuilder itself is fast, has very low-overhead and supports parallel\nbuilds on all platforms. It has no system dependencies: all you need\nto build jbuilder and packages using jbuilder is OCaml. You don't need\n=make= or =bash= as long as the packages themselves don't use =bash=\nexplicitely.\n\nEspecially, one should be able to install OCaml on Windows with a\nbinary installer and then use only the Windows Console to build\nJbuilder and packages using Jbuilder. Although this hasn't been tested\nyet.\n\n** Strengths\n\n*** Composable\n\nTake n repositories that use Jbuilder, arrange them in any way on the\nfile system and the result is still a single repository that Jbuilder\nknows how to build at once.\n\nThis make simultaneous development on multiple packages trivial.\n\n*** Gracefully handles multi-package repositories\n\nJbuilder knows how to handle repositories containing several\npackages. When building via [[https://opam.ocaml.org/][opam]], it is able to correctly use\nlibraries that were previously installed even if they are already\npresent in the source tree.\n\nThe magic invocation is:\n\n#+begin_src sh\n$ jbuilder build --only-packages <package-name> @install\n#+end_src\n\n*** Building against several configurations at once\n\nJbuilder is able to build a given source code repository against\nseveral configurations simultaneously. This helps maintaining packages\nacross several versions of OCaml as you can tests them all at once\nwithout hassle.\n\nThis feature should make cross-compilation easy, see details in the\n[[ROADMAP.org][roadmap]].\n\nThis feature requires [[https://opam.ocaml.org/][opam]].\n\n*** Jenga bridge\n\n[[https://github.com/janestreet/jenga][Jenga]] is another build system for OCaml that has more advanced\nfeatures such as polling or much better editor integration. Jenga is\nmore powerful and more complex and as a result as much more\ndependencies.  It is planned to implement a small bridge between the\ntwo so that a Jbuilder project can build with Jenga using this bridge.\n\n** Status\n\nJbuilder is now in beta testing stage. Once a bit more testing has\nbeen done, it will be released in 1.0.\n\n** Roadmap\n\nSee [[ROADMAP.org]] for the current plan. Help on any of these points is\nwelcome!\n\n** Implementation details\n\nThis section is for people who want to work on Jbuilder itself.\n\n*** Bootstrap\n\nIn order to build itself, Jbuilder uses an OCaml script ([[bootstrap.ml]])\nthat dumps most of the sources of Jbuilder into a single =boot.ml=\nfile. This file is built using =ocamlopt= or =ocamlc= and used to\nbuild everything else.\n\n*** OCaml compatibility test\n\nInstall opam switches for all the entries in the [[jbuild-workspace.dev]]\nfile and run:\n\n#+begin_src sh\n$ make all-supported-ocaml-versions\n#+end_src\n\n*** Repository organization\n\n- =vendor/= contains dependencies of Jbuilder, that have been vendored\n- =plugin/= contains the API given to =jbuild= files that are OCaml\n  scripts\n- =src/= contains the core of =Jbuilder=, as a library so that it can\n  be used to implement the Jenga bridge later\n- =bin/= contains the command line interface\n- =doc/= contains the manual and rules to generate the manual pages\n\n*** Design\n\nJbuilder was initially designed to sort out the public release of Jane\nStreet packages which became incredibly complicated over time. It is\nstill successfully used for this purpose.\n\nOne necessary feature to achieve this is the ability to precisely\nreport the external dependencies necesseray to build a given set of\ntargets without running any command, just by looking at the source\ntree. This is used to automatically generate the =<package>.opam=\nfiles for all Jane Street packages.\n\nTo implement this, the build rules are described using a build arrow,\nwhich is defined in [[src/build.mli][src/build]]. In the end it makes the development\nof the internal rules of Jbuilder very composable and quite pleasant.\n\nTo deal with process multi-plexing, Jbuilder uses a simplified\nLwt/Async like monad, implemented in [[src/future.mli][src/future]].\n\n**** Code flow\n\n- [[src/jbuild_types.ml][src/jbuild_types]] contains the internal representation of =jbuild=\n  files and the parsing code\n- [[src/jbuild_load.ml][src/jbuild_load]] contains the code to scan a source tree and build\n  the internal database by reading the =jbuild= files\n- [[src/gen_rules.ml][src/gen_rules]] contains all the build rules of Jbuilder\n- [[src/build_system.ml][src/build_system]] contains a trivial implementation of a Build\n  system. This is what Jenga will provide when implementing the bridge\n",
  "readmeFilename": "README.org",
  "scripts": {
    "postinstall": "eval $(dependencyEnv) && nopam && ocaml bootstrap.ml && ./boot.exe -j 4 && (opam-installer --prefix=$opam_prefix || true)"
  },
  "version": "1.0.2"
}
