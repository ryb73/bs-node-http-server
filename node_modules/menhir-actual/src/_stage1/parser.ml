type token =
  | TOKEN
  | TYPE
  | LEFT
  | RIGHT
  | NONASSOC
  | START
  | PREC
  | PUBLIC
  | COLON
  | BAR
  | EOF
  | EQUAL
  | INLINE
  | LPAREN
  | RPAREN
  | COMMA
  | QUESTION
  | STAR
  | PLUS
  | PARAMETER
  | ON_ERROR_REDUCE
  | LID of (string Positions.located)
  | UID of (string Positions.located)
  | HEADER of (Stretch.t)
  | OCAMLTYPE of (Stretch.ocamltype)
  | PERCENTPERCENT of (Stretch.t Lazy.t)
  | ACTION of (Syntax.identifier option array -> Syntax.action)

open Parsing;;
let _ = parse_error;;
# 9 "parser.mly"

open Syntax
open Positions

# 38 "parser.ml"
let yytransl_const = [|
  257 (* TOKEN *);
  258 (* TYPE *);
  259 (* LEFT *);
  260 (* RIGHT *);
  261 (* NONASSOC *);
  262 (* START *);
  263 (* PREC *);
  264 (* PUBLIC *);
  265 (* COLON *);
  266 (* BAR *);
    0 (* EOF *);
  267 (* EQUAL *);
  268 (* INLINE *);
  269 (* LPAREN *);
  270 (* RPAREN *);
  271 (* COMMA *);
  272 (* QUESTION *);
  273 (* STAR *);
  274 (* PLUS *);
  275 (* PARAMETER *);
  276 (* ON_ERROR_REDUCE *);
    0|]

let yytransl_block = [|
  277 (* LID *);
  278 (* UID *);
  279 (* HEADER *);
  280 (* OCAMLTYPE *);
  281 (* PERCENTPERCENT *);
  282 (* ACTION *);
    0|]

let yylhs = "\255\255\
\001\000\004\000\004\000\002\000\002\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\006\000\006\000\010\000\
\010\000\010\000\011\000\011\000\013\000\013\000\012\000\012\000\
\007\000\007\000\008\000\008\000\003\000\003\000\014\000\015\000\
\015\000\015\000\015\000\015\000\016\000\016\000\020\000\020\000\
\021\000\021\000\022\000\022\000\023\000\023\000\009\000\009\000\
\017\000\017\000\024\000\024\000\024\000\019\000\019\000\018\000\
\026\000\026\000\025\000\025\000\028\000\028\000\027\000\029\000\
\029\000\030\000\030\000\000\000"

let yylen = "\002\000\
\004\000\001\000\001\000\000\000\002\000\001\000\003\000\002\000\
\003\000\003\000\002\000\002\000\002\000\000\000\001\000\001\000\
\001\000\001\000\000\000\003\000\001\000\001\000\000\000\001\000\
\000\000\003\000\000\000\002\000\000\000\002\000\007\000\000\000\
\001\000\001\000\002\000\002\000\000\000\003\000\001\000\003\000\
\000\000\003\000\001\000\003\000\002\000\002\000\000\000\003\000\
\000\000\001\000\001\000\001\000\001\000\000\000\003\000\003\000\
\000\000\002\000\001\000\002\000\002\000\003\000\002\000\000\000\
\002\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\004\000\000\000\068\000\000\000\000\000\000\000\016\000\017\000\
\018\000\000\000\000\000\047\000\006\000\029\000\005\000\019\000\
\015\000\025\000\047\000\027\000\000\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\024\000\000\000\000\000\
\002\000\000\000\003\000\001\000\030\000\000\000\000\000\000\000\
\021\000\022\000\000\000\000\000\035\000\036\000\000\000\020\000\
\026\000\000\000\045\000\051\000\053\000\052\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\000\000\038\000\050\000\064\000\044\000\040\000\054\000\000\000\
\000\000\000\000\000\000\000\000\064\000\060\000\000\000\000\000\
\000\000\063\000\065\000\064\000\056\000\000\000\058\000\000\000\
\055\000\062\000\000\000"

let yydgoto = "\002\000\
\003\000\004\000\024\000\036\000\015\000\018\000\026\000\021\000\
\023\000\016\000\025\000\031\000\043\000\037\000\038\000\057\000\
\068\000\071\000\075\000\061\000\051\000\058\000\059\000\055\000\
\072\000\082\000\073\000\078\000\074\000\083\000"

let yysindex = "\015\000\
\000\000\000\000\000\000\146\255\239\254\001\255\000\000\000\000\
\000\000\003\255\034\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\240\254\000\000\047\255\004\000\
\047\255\047\255\047\255\240\254\000\000\000\000\237\254\029\255\
\000\000\065\255\000\000\000\000\000\000\237\254\237\254\060\255\
\000\000\000\000\076\255\137\255\000\000\000\000\080\255\000\000\
\000\000\237\254\000\000\000\000\000\000\000\000\000\000\237\254\
\087\255\085\255\106\255\091\255\100\255\115\255\000\000\237\254\
\237\254\000\000\000\000\000\000\000\000\000\000\000\000\105\255\
\126\255\039\255\128\255\153\255\000\000\000\000\237\254\135\255\
\137\255\000\000\000\000\000\000\000\000\126\255\000\000\237\254\
\000\000\000\000\137\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\075\255\000\000\000\000\000\000\
\000\000\114\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\171\255\000\000\017\255\023\255\
\082\255\139\255\107\255\178\255\000\000\000\000\000\000\026\255\
\000\000\070\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\255\009\255\000\000\000\000\154\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\156\255\164\255\000\000\212\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\141\255\007\255\006\000\001\000\000\000\000\000\000\000\192\255\
\185\255\000\000\000\000\000\000\000\000\142\255\000\000\000\000\
\000\000\000\000\205\255"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\165\000\
\167\000\000\000\000\000\131\000\226\255\000\000\000\000\000\000\
\000\000\103\000\000\000\123\000\000\000\125\000\225\255\000\000\
\000\000\117\000\127\000\114\000\000\000\000\000"

let yytablesize = 287
let yytable = "\044\000\
\057\000\041\000\042\000\033\000\029\000\031\000\017\000\047\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\001\000\
\057\000\013\000\013\000\013\000\013\000\013\000\013\000\048\000\
\019\000\060\000\020\000\048\000\048\000\048\000\048\000\048\000\
\057\000\048\000\060\000\013\000\013\000\023\000\023\000\013\000\
\045\000\013\000\081\000\032\000\032\000\079\000\033\000\033\000\
\087\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\091\000\022\000\041\000\080\000\042\000\030\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\046\000\041\000\041\000\014\000\014\000\014\000\014\000\014\000\
\014\000\049\000\011\000\011\000\011\000\011\000\011\000\011\000\
\050\000\014\000\034\000\034\000\056\000\014\000\014\000\062\000\
\014\000\014\000\063\000\014\000\011\000\011\000\023\000\023\000\
\011\000\065\000\011\000\009\000\009\000\009\000\009\000\009\000\
\009\000\066\000\027\000\027\000\027\000\027\000\027\000\027\000\
\064\000\052\000\053\000\054\000\067\000\009\000\009\000\023\000\
\023\000\009\000\076\000\009\000\027\000\027\000\027\000\077\000\
\027\000\084\000\027\000\007\000\007\000\007\000\007\000\007\000\
\007\000\088\000\005\000\006\000\007\000\008\000\009\000\010\000\
\052\000\053\000\054\000\039\000\040\000\007\000\007\000\079\000\
\023\000\007\000\037\000\007\000\011\000\012\000\059\000\061\000\
\013\000\043\000\014\000\008\000\008\000\008\000\008\000\008\000\
\008\000\039\000\010\000\010\000\010\000\010\000\010\000\010\000\
\028\000\027\000\089\000\070\000\069\000\008\000\008\000\066\000\
\085\000\008\000\066\000\008\000\010\000\010\000\021\000\090\000\
\010\000\021\000\010\000\086\000\021\000\066\000\066\000\021\000\
\021\000\021\000\066\000\067\000\021\000\021\000\067\000\000\000\
\000\000\021\000\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\067\000\000\000\000\000\000\000\067\000\000\000\
\049\000\049\000\000\000\000\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\000\000\000\057\000\032\000\057\000\031\000\000\000\034\000\
\000\000\031\000\000\000\000\000\000\000\057\000\057\000\000\000\
\000\000\057\000\031\000\031\000\035\000\000\000\031\000"

let yycheck = "\031\000\
\000\000\021\001\022\001\000\000\021\001\000\000\024\001\038\000\
\039\000\001\001\002\001\003\001\004\001\005\001\006\001\001\000\
\010\001\001\001\002\001\003\001\004\001\005\001\006\001\015\001\
\024\001\056\000\024\001\019\001\020\001\021\001\022\001\023\001\
\026\001\025\001\065\000\019\001\020\001\021\001\022\001\023\001\
\012\001\025\001\074\000\021\001\022\001\007\001\021\001\022\001\
\079\000\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\088\000\024\001\010\001\021\001\022\001\015\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\008\001\025\001\026\001\001\001\002\001\003\001\004\001\005\001\
\006\001\022\001\001\001\002\001\003\001\004\001\005\001\006\001\
\013\001\015\001\021\001\022\001\013\001\019\001\020\001\009\001\
\022\001\023\001\014\001\025\001\019\001\020\001\021\001\022\001\
\023\001\015\001\025\001\001\001\002\001\003\001\004\001\005\001\
\006\001\014\001\001\001\002\001\003\001\004\001\005\001\006\001\
\015\001\016\001\017\001\018\001\010\001\019\001\020\001\021\001\
\022\001\023\001\026\001\025\001\019\001\020\001\021\001\010\001\
\023\001\010\001\025\001\001\001\002\001\003\001\004\001\005\001\
\006\001\011\001\001\001\002\001\003\001\004\001\005\001\006\001\
\016\001\017\001\018\001\025\000\026\000\019\001\020\001\007\001\
\022\001\023\001\009\001\025\001\019\001\020\001\026\001\026\001\
\023\001\014\001\025\001\001\001\002\001\003\001\004\001\005\001\
\006\001\014\001\001\001\002\001\003\001\004\001\005\001\006\001\
\020\000\019\000\084\000\065\000\064\000\019\001\020\001\007\001\
\076\000\023\001\010\001\025\001\019\001\020\001\007\001\086\000\
\023\001\010\001\025\001\077\000\013\001\021\001\022\001\016\001\
\017\001\018\001\026\001\007\001\021\001\022\001\010\001\255\255\
\255\255\026\001\007\001\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\255\255\255\255\255\255\026\001\255\255\
\021\001\022\001\255\255\255\255\255\255\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\008\001\255\255\010\001\008\001\012\001\008\001\255\255\012\001\
\255\255\012\001\255\255\255\255\255\255\021\001\022\001\255\255\
\255\255\025\001\021\001\022\001\025\001\255\255\025\001"

let yynames_const = "\
  TOKEN\000\
  TYPE\000\
  LEFT\000\
  RIGHT\000\
  NONASSOC\000\
  START\000\
  PREC\000\
  PUBLIC\000\
  COLON\000\
  BAR\000\
  EOF\000\
  EQUAL\000\
  INLINE\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  QUESTION\000\
  STAR\000\
  PLUS\000\
  PARAMETER\000\
  ON_ERROR_REDUCE\000\
  "

let yynames_block = "\
  LID\000\
  UID\000\
  HEADER\000\
  OCAMLTYPE\000\
  PERCENTPERCENT\000\
  ACTION\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'declarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Stretch.t Lazy.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rules) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'trailer) in
    Obj.repr(
# 43 "parser.mly"
    (
      {
        pg_filename          = ""; (* filled in by the caller *)
        pg_declarations      = List.rev _1;
        pg_rules             = _3;
        pg_trailer           = _4
      }
    )
# 275 "parser.ml"
               : Syntax.partial_grammar))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
    ( None )
# 281 "parser.ml"
               : 'trailer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Stretch.t Lazy.t) in
    Obj.repr(
# 56 "parser.mly"
    ( Some (Lazy.force _1) )
# 288 "parser.ml"
               : 'trailer))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
    ( [] )
# 294 "parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 66 "parser.mly"
    ( _2 @ _1 )
# 302 "parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Stretch.t) in
    Obj.repr(
# 70 "parser.mly"
    ( [ unknown_pos (DCode _1) ] )
# 309 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'optional_ocamltype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'terminals) in
    Obj.repr(
# 73 "parser.mly"
    ( List.map (Positions.map (fun terminal -> DToken (_2, terminal))) _3 )
# 317 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nonterminals) in
    Obj.repr(
# 76 "parser.mly"
    ( List.map (Positions.map (fun nonterminal -> DStart nonterminal)) _2 )
# 324 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Stretch.ocamltype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'actuals) in
    Obj.repr(
# 79 "parser.mly"
    ( List.map (Positions.map (fun nt -> DType (_2, nt)))
        (List.map Parameters.with_pos _3) )
# 333 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Stretch.ocamltype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nonterminals) in
    Obj.repr(
# 84 "parser.mly"
    ( Misc.mapd (fun ntloc ->
        Positions.mapd (fun nt -> DStart nt, DType (_2, ParameterVar ntloc)) ntloc) _3 )
# 342 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'priority_keyword) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'symbols) in
    Obj.repr(
# 88 "parser.mly"
    ( let prec = ParserAux.new_precedence_level (rhs_start_pos 1) (rhs_end_pos 1) in
      List.map (Positions.map (fun symbol -> DTokenProperties (symbol, _1, prec))) _2 )
# 351 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Stretch.ocamltype) in
    Obj.repr(
# 92 "parser.mly"
    ( [ unknown_pos (DParameter _2) ] )
# 358 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actuals) in
    Obj.repr(
# 95 "parser.mly"
    ( let prec = ParserAux.new_on_error_reduce_level() in
      List.map (Positions.map (fun nt -> DOnErrorReduce (nt, prec)))
        (List.map Parameters.with_pos _2) )
# 367 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
    ( None )
# 373 "parser.ml"
               : 'optional_ocamltype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Stretch.ocamltype) in
    Obj.repr(
# 103 "parser.mly"
    ( Some _1 )
# 380 "parser.ml"
               : 'optional_ocamltype))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
    ( LeftAssoc )
# 386 "parser.ml"
               : 'priority_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
    ( RightAssoc )
# 392 "parser.ml"
               : 'priority_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
    ( NonAssoc )
# 398 "parser.ml"
               : 'priority_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
    ( [] )
# 404 "parser.ml"
               : 'symbols))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'symbols) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'optional_comma) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'symbol) in
    Obj.repr(
# 125 "parser.mly"
    ( _3 :: _1 )
# 413 "parser.ml"
               : 'symbols))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Positions.located) in
    Obj.repr(
# 129 "parser.mly"
    ( _1 )
# 420 "parser.ml"
               : 'symbol))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Positions.located) in
    Obj.repr(
# 131 "parser.mly"
    ( _1 )
# 427 "parser.ml"
               : 'symbol))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
    ( () )
# 433 "parser.ml"
               : 'optional_comma))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
    ( () )
# 439 "parser.ml"
               : 'optional_comma))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
    ( [] )
# 445 "parser.ml"
               : 'terminals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'terminals) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'optional_comma) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Positions.located) in
    Obj.repr(
# 147 "parser.mly"
    ( _3 :: _1 )
# 454 "parser.ml"
               : 'terminals))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "parser.mly"
    ( [] )
# 460 "parser.ml"
               : 'nonterminals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'nonterminals) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string Positions.located) in
    Obj.repr(
# 153 "parser.mly"
    ( _2 :: _1 )
# 468 "parser.ml"
               : 'nonterminals))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parser.mly"
    ( [] )
# 474 "parser.ml"
               : 'rules))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rules) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rule) in
    Obj.repr(
# 164 "parser.mly"
    ( _2 :: _1 )
# 482 "parser.ml"
               : 'rules))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'flags) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'symbol) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'optional_formal_parameters) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'optional_bar) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'production_group) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'production_groups) in
    Obj.repr(
# 173 "parser.mly"
    (
      let public, inline = _1 in
      { pr_public_flag = public;
        pr_inline_flag = inline;
        pr_nt          = Positions.value _2;
        pr_positions   = [ Positions.position _2 ];
        pr_parameters  = _3;
        pr_branches    = List.flatten (_6 :: List.rev _7)
      }
    )
# 503 "parser.ml"
               : 'rule))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "parser.mly"
    ( false, false )
# 509 "parser.ml"
               : 'flags))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "parser.mly"
    ( true, false )
# 515 "parser.ml"
               : 'flags))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "parser.mly"
    ( false, true )
# 521 "parser.ml"
               : 'flags))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "parser.mly"
    ( true, true )
# 527 "parser.ml"
               : 'flags))
; (fun __caml_parser_env ->
    Obj.repr(
# 194 "parser.mly"
    ( true, true )
# 533 "parser.ml"
               : 'flags))
; (fun __caml_parser_env ->
    Obj.repr(
# 204 "parser.mly"
    ( [] )
# 539 "parser.ml"
               : 'optional_formal_parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'formal_parameters) in
    Obj.repr(
# 206 "parser.mly"
    ( _2 )
# 546 "parser.ml"
               : 'optional_formal_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'symbol) in
    Obj.repr(
# 210 "parser.mly"
    ( [ Positions.value _1 ] )
# 553 "parser.ml"
               : 'formal_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'symbol) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal_parameters) in
    Obj.repr(
# 212 "parser.mly"
    ( Positions.value _1 :: _3 )
# 561 "parser.ml"
               : 'formal_parameters))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "parser.mly"
    ( [] )
# 567 "parser.ml"
               : 'optional_actuals))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_comma) in
    Obj.repr(
# 218 "parser.mly"
    ( _2 )
# 574 "parser.ml"
               : 'optional_actuals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actual) in
    Obj.repr(
# 222 "parser.mly"
    ( [ _1 ] )
# 581 "parser.ml"
               : 'actuals_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actual) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_comma) in
    Obj.repr(
# 224 "parser.mly"
    ( _1 :: _3 )
# 589 "parser.ml"
               : 'actuals_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'symbol) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optional_actuals) in
    Obj.repr(
# 228 "parser.mly"
    ( Parameters.app _1 _2 )
# 597 "parser.ml"
               : 'actual))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'modifier) in
    Obj.repr(
# 230 "parser.mly"
    ( ParameterApp (_2, [ _1 ]) )
# 605 "parser.ml"
               : 'actual))
; (fun __caml_parser_env ->
    Obj.repr(
# 234 "parser.mly"
    ( [] )
# 611 "parser.ml"
               : 'actuals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'optional_comma) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'actual) in
    Obj.repr(
# 236 "parser.mly"
    ( _3::_1 )
# 620 "parser.ml"
               : 'actuals))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "parser.mly"
    ( () )
# 626 "parser.ml"
               : 'optional_bar))
; (fun __caml_parser_env ->
    Obj.repr(
# 242 "parser.mly"
    ( () )
# 632 "parser.ml"
               : 'optional_bar))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "parser.mly"
    ( unknown_pos "option" )
# 638 "parser.ml"
               : 'modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "parser.mly"
    ( unknown_pos "nonempty_list" )
# 644 "parser.ml"
               : 'modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 254 "parser.mly"
    ( unknown_pos "list" )
# 650 "parser.ml"
               : 'modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 262 "parser.mly"
    ( [] )
# 656 "parser.ml"
               : 'production_groups))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'production_groups) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'production_group) in
    Obj.repr(
# 264 "parser.mly"
    ( _3 :: _1 )
# 664 "parser.ml"
               : 'production_groups))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'productions) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.identifier option array -> Syntax.action) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optional_precedence) in
    Obj.repr(
# 268 "parser.mly"
    (
      let productions, action, oprec2 = _1, _2, _3 in
      (* If multiple productions share a single semantic action, check
         that all of them bind the same names. *)
      ParserAux.check_production_group productions;
      (* Then, *)
      List.map (fun (producers, oprec1, level, pos) ->
        (* Replace [$i] with [_i]. *)
        let pr_producers = ParserAux.normalize_producers producers in
        (* Distribute the semantic action. Also, check that every [$i]
           is within bounds. *)
        let pr_action = action (ParserAux.producer_names producers) in
        {
          pr_producers;
          pr_action;
          pr_branch_prec_annotation   = ParserAux.override pos oprec1 oprec2;
          pr_branch_production_level  = level;
          pr_branch_position          = pos
        })
      productions
    )
# 693 "parser.ml"
               : 'production_group))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "parser.mly"
    ( None )
# 699 "parser.ml"
               : 'optional_precedence))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'symbol) in
    Obj.repr(
# 294 "parser.mly"
    ( Some _2 )
# 706 "parser.ml"
               : 'optional_precedence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'production) in
    Obj.repr(
# 303 "parser.mly"
    ( [ _1 ] )
# 713 "parser.ml"
               : 'productions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'production) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bar_productions) in
    Obj.repr(
# 305 "parser.mly"
    ( _1 :: _2 )
# 721 "parser.ml"
               : 'productions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'production) in
    Obj.repr(
# 309 "parser.mly"
    ( [ _2 ] )
# 728 "parser.ml"
               : 'bar_productions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'production) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bar_productions) in
    Obj.repr(
# 311 "parser.mly"
    ( _2 :: _3 )
# 736 "parser.ml"
               : 'bar_productions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'producers) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optional_precedence) in
    Obj.repr(
# 315 "parser.mly"
    ( List.rev _1,
      _2,
      ParserAux.new_production_level(),
      Positions.lex_join (symbol_start_pos()) (symbol_end_pos())
    )
# 748 "parser.ml"
               : 'production))
; (fun __caml_parser_env ->
    Obj.repr(
# 323 "parser.mly"
    ( [] )
# 754 "parser.ml"
               : 'producers))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'producers) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'producer) in
    Obj.repr(
# 325 "parser.mly"
    ( _2 :: _1 )
# 762 "parser.ml"
               : 'producers))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actual) in
    Obj.repr(
# 333 "parser.mly"
    ( Positions.lex_join (symbol_start_pos()) (symbol_end_pos()), None, _1 )
# 769 "parser.ml"
               : 'producer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Positions.located) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'actual) in
    Obj.repr(
# 335 "parser.mly"
    ( Positions.lex_join (symbol_start_pos()) (symbol_end_pos()), Some _1, _3 )
# 777 "parser.ml"
               : 'producer))
(* Entry grammar *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let grammar (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.partial_grammar)
;;
