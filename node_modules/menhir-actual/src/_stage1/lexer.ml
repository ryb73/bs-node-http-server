# 1 "lexer.mll"
 

open Lexing
open Parser
open Positions
open Keyword

(* ------------------------------------------------------------------------ *)

(* Short-hands. *)

let error1 pos =
  Error.error (Positions.one pos)

let error2 lexbuf =
  Error.error (Positions.two lexbuf.lex_start_p lexbuf.lex_curr_p)

(* ------------------------------------------------------------------------ *)

(* This wrapper saves the current lexeme start, invokes its argument,
   and restores it. This allows transmitting better positions to the
   parser. *)

let savestart lexbuf f =
  let startp = lexbuf.lex_start_p in
  let token = f lexbuf in
  lexbuf.lex_start_p <- startp;
  token

(* ------------------------------------------------------------------------ *)

(* Extracts a chunk out of the source file. *)

let chunk ofs1 ofs2 =
  let contents = Error.get_file_contents() in
  let len = ofs2 - ofs1 in
  String.sub contents ofs1 len

(* ------------------------------------------------------------------------ *)

(* Overwrites an old character with a new one at a specified
   offset in a [bytes] buffer. *)

let overwrite content offset c1 c2 =
  assert (Bytes.get content offset = c1);
  Bytes.set content offset c2

(* ------------------------------------------------------------------------ *)

(* Keyword recognition and construction. *)

(* A monster is a spot where we have identified a keyword in concrete syntax.
   We describe a monster as an object with the following methods: *)

type monster = {

  (* The position of the monster. *)
  pos: Positions.t;

  (* This method is passed an array of (optional) names for the producers,
     that is, the elements of the production's right-hand side. It may
     perform some checks and is allowed to fail. *)
  check: string option array -> unit;

  (* This method transforms the keyword (in place) into a conventional
     OCaml identifier. This is done by replacing '$', '(', and ')' with
     '_'. Bloody. The arguments are [ofs1] and [content]. [ofs1] is the
     offset where [content] begins in the source file. *)
  transform: int -> bytes -> unit;

  (* This is the keyword, in abstract syntax. *)
  keyword: keyword option;

}

(* ------------------------------------------------------------------------ *)

(* The [$syntaxerror] monster. *)

let syntaxerror pos : monster =
  let check _ = ()
  and transform ofs1 content =
    (* [$syntaxerror] is replaced with
       [(raise _eRR)]. Same length. *)
    let pos = start_of_position pos in
    let ofs = pos.pos_cnum - ofs1 in
    let source = "(raise _eRR)" in
    Bytes.blit_string source 0 content ofs (String.length source)
  and keyword =
    Some SyntaxError
  in
  { pos; check; transform; keyword }

(* ------------------------------------------------------------------------ *)

(* We check that every [$i] is within range. Also, we forbid using [$i]
   when a producer has been given a name; this is bad style and may be
   a mistake. (Plus, this simplies our life, as we rewrite [$i] to [_i],
   and we would have to rewrite it to a different identifier otherwise.) *)

let check_dollar pos i producers =
  if not (0 <= i - 1 && i - 1 < Array.length producers) then
    Error.error [pos] "$%d refers to a nonexistent symbol." i
  else
    producers.(i - 1) |> Option.iter (fun x ->
      Error.error [pos] "please do not say: $%d. Instead, say: %s." i x
    )

(* We check that every reference to a producer [x] in a position keyword,
   such as [$startpos(x)], exists. *)

let check_producer pos x producers =
  if not (List.mem (Some x) (Array.to_list producers)) then
    Error.error [pos] "%s refers to a nonexistent symbol." x

(* ------------------------------------------------------------------------ *)

(* The [$i] monster. *)

let dollar pos i : monster =
  let check = check_dollar pos i
  and transform ofs1 content =
    (* [$i] is replaced with [_i]. Thus, it is no longer a keyword. *)
    let pos = start_of_position pos in
    let ofs = pos.pos_cnum - ofs1 in
    overwrite content ofs '$' '_'
  and keyword =
    None
  in
  { pos; check; transform; keyword }

(* ------------------------------------------------------------------------ *)

(* The position-keyword monster. The most horrible of all. *)

let position pos
  (where : string)
  (flavor : string)
  (i : string option) (x : string option)
=
  let none _ = () in
  let where, ofslpar (* offset of the opening parenthesis, if there is one *) =
    match where with
    | "symbolstart" -> WhereSymbolStart, 15
    | "start"       -> WhereStart,        9
    | "end"         -> WhereEnd,          7
    | _       -> assert false
  in
  let () =
    match where, i, x with
    | WhereSymbolStart, Some _, _
    | WhereSymbolStart, _, Some _ ->
        Error.error [pos] "$symbolstart%s does not take a parameter." flavor
    | _, _, _ ->
        ()
  in
  let flavor =
    match flavor with
    | "pos"   -> FlavorPosition
    | "ofs"   -> FlavorOffset
    | _       -> assert false
  in
  let subject, check =
    match i, x with
    | Some i, None ->
        let ii = int_of_string i in (* cannot fail *)
        if ii = 0 && where = WhereEnd then
          (* [$endpos($0)] *)
          Before, none
        else
          (* [$startpos($i)] is rewritten to [$startpos(_i)]. *)
          RightNamed ("_" ^ i), check_dollar pos ii
    | None, Some x ->
        (* [$startpos(x)] *)
        RightNamed x, check_producer pos x
    | None, None ->
        (* [$startpos] *)
        Left, none
    | Some _, Some _ ->
        assert false
  in
  let transform ofs1 content =
    let pos = start_of_position pos in
    let ofs = pos.pos_cnum - ofs1 in
    overwrite content ofs '$' '_';
    let ofslpar = ofs + ofslpar in
    match i, x with
    | None, Some x ->
        overwrite content ofslpar '(' '_';
        overwrite content (ofslpar + 1 + String.length x) ')' '_'
    | Some i, None ->
        overwrite content ofslpar '(' '_';
        overwrite content (ofslpar + 1) '$' '_';
        overwrite content (ofslpar + 2 + String.length i) ')' '_'
    | _, _ ->
        ()
  in
  let keyword =
    Some (Position (subject, where, flavor))
  in
  { pos; check; transform; keyword }

(* ------------------------------------------------------------------------ *)

(* In an OCaml header, there should be no monsters. This is just a sanity
   check. *)

let no_monsters monsters =
  match monsters with
  | [] ->
      ()
  | monster :: _ ->
      Error.error [monster.pos]
        "a Menhir keyword cannot be used in an OCaml header."

(* ------------------------------------------------------------------------ *)

(* Creates a stretch. *)

let mk_stretch pos1 pos2 parenthesize monsters =
  (* Read the specified chunk of the file. *)
  let ofs1 = pos1.pos_cnum
  and ofs2 = pos2.pos_cnum in
  let raw_content : string = chunk ofs1 ofs2 in
  (* Transform the monsters, if there are any. (This explicit test
     allows saving one string copy and keeping just one live copy.) *)
  let content : string =
    match monsters with
    | [] ->
        raw_content
    | _ :: _ ->
        let content : bytes = Bytes.of_string raw_content in
        List.iter (fun monster -> monster.transform ofs1 content) monsters;
        Bytes.unsafe_to_string content
  in
  (* Add whitespace so that the column numbers match those of the source file.
     If requested, add parentheses so that the semantic action can be inserted
     into other code without ambiguity. *)
  let content =
    if parenthesize then
      (String.make (pos1.pos_cnum - pos1.pos_bol - 1) ' ') ^ "(" ^ content ^ ")"
    else
      (String.make (pos1.pos_cnum - pos1.pos_bol) ' ') ^ content
  in
  Stretch.({
    stretch_filename = Error.get_filename();
    stretch_linenum = pos1.pos_lnum;
    stretch_linecount = pos2.pos_lnum - pos1.pos_lnum;
    stretch_content = content;
    stretch_raw_content = raw_content;
    stretch_keywords = Misc.map_opt (fun monster -> monster.keyword) monsters
  })

(* ------------------------------------------------------------------------ *)

(* OCaml's reserved words. *)

let reserved =
  let table = Hashtbl.create 149 in
  List.iter (fun word -> Hashtbl.add table word ()) [
    "and";
    "as";
    "assert";
    "begin";
    "class";
    "constraint";
    "do";
    "done";
    "downto";
    "else";
    "end";
    "exception";
    "external";
    "false";
    "for";
    "fun";
    "function";
    "functor";
    "if";
    "in";
    "include";
    "inherit";
    "initializer";
    "lazy";
    "let";
    "match";
    "method";
    "module";
    "mutable";
    "new";
    "object";
    "of";
    "open";
    "or";
    "parser";
    "private";
    "rec";
    "sig";
    "struct";
    "then";
    "to";
    "true";
    "try";
    "type";
    "val";
    "virtual";
    "when";
    "while";
    "with";
    "mod";
    "land";
    "lor";
    "lxor";
    "lsl";
    "lsr";
    "asr";
  ];
  table


# 323 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\224\255\225\255\226\255\228\255\003\000\001\000\232\255\
    \003\000\209\000\161\001\235\255\236\255\237\255\238\255\239\255\
    \004\000\241\255\242\255\243\255\020\000\227\255\244\255\016\000\
    \017\000\032\000\017\000\026\000\033\000\038\000\029\000\029\000\
    \035\000\043\000\035\000\255\255\046\000\254\255\046\000\035\000\
    \253\255\049\000\049\000\038\000\252\255\045\000\059\000\042\000\
    \043\000\048\000\061\000\251\255\064\000\048\000\047\000\250\255\
    \050\000\067\000\065\000\068\000\249\255\060\000\064\000\071\000\
    \248\255\074\000\063\000\072\000\058\000\074\000\062\000\247\255\
    \069\000\073\000\069\000\079\000\246\255\001\000\080\000\068\000\
    \069\000\073\000\071\000\091\000\073\000\087\000\089\000\073\000\
    \092\000\114\000\245\255\229\255\230\255\011\000\004\000\012\000\
    \252\255\253\255\001\000\005\000\255\255\254\255\036\001\250\255\
    \251\255\006\000\252\255\007\000\254\255\002\000\029\000\255\255\
    \253\255\096\001\243\255\244\255\007\000\245\255\247\255\248\255\
    \113\002\009\000\122\000\254\255\255\255\246\255\155\000\160\000\
    \217\000\035\001\174\000\163\000\184\000\203\000\192\000\226\000\
    \220\000\220\000\252\000\236\000\235\000\241\000\253\000\245\000\
    \242\000\012\000\084\002\167\002\062\001\245\001\251\255\251\255\
    \243\000\006\001\240\000\004\001\249\000\250\000\009\001\007\001\
    \249\255\008\001\007\001\024\001\024\001\008\001\023\001\018\001\
    \014\001\019\001\037\001\025\001\026\001\030\001\028\001\250\255\
    \048\002\243\255\244\255\008\000\245\255\247\255\248\255\242\002\
    \253\255\254\255\011\000\246\255\029\001\034\001\104\001\255\001\
    \071\001\113\001\084\001\126\001\141\001\145\001\139\001\139\001\
    \160\001\170\001\169\001\176\001\187\001\179\001\176\001\015\000\
    \090\003\172\003\014\002\126\003\251\255\251\255\198\001\218\001\
    \196\001\227\001\215\001\216\001\220\001\218\001\249\255\219\001\
    \218\001\235\001\235\001\219\001\234\001\230\001\225\001\231\001\
    \246\001\234\001\235\001\239\001\237\001\250\255\162\004\249\255\
    \250\255\009\000\251\255\252\255\253\255\014\000\051\000\255\255\
    \254\255\163\004\251\255\252\255\010\000\254\255\216\002\255\255\
    \253\255\013\000\092\004\000\000\168\002\054\000\043\004\055\000\
    \159\004\138\004\170\002\113\002\255\255\133\002\040\003\254\255\
    \135\002\182\004\136\002\217\002\253\255\254\255\016\000\255\255\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\024\000\023\000\255\255\
    \031\000\022\000\021\000\255\255\255\255\255\255\255\255\255\255\
    \015\000\255\255\255\255\255\255\031\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\023\000\255\255\
    \255\255\255\255\003\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\003\000\255\255\005\000\255\255\005\000\005\000\255\255\
    \255\255\255\255\255\255\255\255\010\000\255\255\255\255\255\255\
    \012\000\002\000\012\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\003\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\010\000\255\255\255\255\255\255\012\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\004\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\255\255\255\255\255\255\006\000\006\000\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255\004\000\255\255\
    \255\255\001\000\001\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    ";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\093\000\255\255\096\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\103\000\000\000\
    \000\000\255\255\000\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\114\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \177\000\000\000\000\000\255\255\000\000\000\000\000\000\255\255\
    \000\000\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\239\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\250\000\000\000\000\000\255\255\000\000\000\001\000\000\
    \000\000\255\255\003\001\255\255\255\255\255\255\007\001\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\255\255\255\255\020\001\000\000\000\000\255\255\000\000\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\005\000\007\000\007\000\005\000\006\000\007\000\100\000\
    \106\000\117\000\180\000\242\000\253\000\007\000\100\000\253\000\
    \094\000\099\000\023\001\000\000\000\000\000\000\000\000\000\000\
    \005\000\000\000\000\000\005\000\000\000\020\000\000\000\015\001\
    \016\000\015\000\012\000\011\000\018\000\092\000\091\000\008\000\
    \101\000\112\000\093\000\125\000\146\000\187\000\098\000\208\000\
    \248\000\022\000\019\000\005\000\004\000\017\000\005\000\013\000\
    \111\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\111\000\247\000\012\001\015\001\010\000\
    \078\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\003\000\014\000\024\000\077\000\072\000\
    \029\000\056\000\027\000\023\000\025\000\052\000\028\000\026\000\
    \030\000\045\000\041\000\038\000\032\000\036\000\033\000\021\000\
    \034\000\035\000\058\000\037\000\039\000\057\000\031\000\040\000\
    \042\000\043\000\044\000\046\000\047\000\048\000\049\000\050\000\
    \051\000\053\000\054\000\055\000\065\000\061\000\059\000\060\000\
    \062\000\063\000\064\000\066\000\067\000\068\000\069\000\070\000\
    \071\000\073\000\074\000\075\000\076\000\079\000\080\000\081\000\
    \082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\090\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\123\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \002\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\255\255\097\000\164\000\163\000\161\000\
    \133\000\132\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\153\000\134\000\106\000\135\000\
    \009\000\105\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\107\000\130\000\136\000\137\000\
    \138\000\110\000\131\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\139\000\140\000\141\000\
    \142\000\143\000\108\000\152\000\144\000\145\000\145\000\154\000\
    \155\000\156\000\117\000\157\000\158\000\116\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\149\000\149\000\
    \159\000\160\000\162\000\141\000\141\000\165\000\166\000\109\000\
    \167\000\168\000\119\000\169\000\120\000\122\000\170\000\118\000\
    \121\000\115\000\171\000\172\000\173\000\174\000\175\000\226\000\
    \225\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \223\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \215\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\124\000\192\000\123\000\195\000\194\000\
    \196\000\193\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\197\000\198\000\199\000\200\000\
    \010\000\201\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\202\000\203\000\150\000\204\000\
    \205\000\214\000\206\000\207\000\104\000\149\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\149\000\191\000\
    \191\000\191\000\191\000\191\000\191\000\191\000\191\000\191\000\
    \191\000\207\000\180\000\216\000\217\000\179\000\211\000\211\000\
    \211\000\211\000\211\000\211\000\211\000\211\000\211\000\211\000\
    \218\000\219\000\220\000\221\000\222\000\224\000\203\000\203\000\
    \227\000\228\000\182\000\229\000\183\000\230\000\231\000\181\000\
    \186\000\185\000\232\000\233\000\234\000\235\000\236\000\237\000\
    \115\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \148\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \012\001\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\184\000\012\001\178\000\015\001\015\001\
    \000\000\000\000\013\001\147\000\013\001\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\012\001\
    \151\000\012\001\000\000\000\000\000\000\000\000\127\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\126\000\253\000\023\001\128\000\001\001\022\001\000\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\000\000\000\000\000\000\000\000\147\000\000\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\191\000\191\000\191\000\191\000\191\000\191\000\
    \191\000\191\000\191\000\191\000\000\000\000\000\000\000\000\000\
    \178\000\000\000\000\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\000\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\000\000\000\000\000\000\189\000\
    \016\001\016\001\016\001\016\001\016\001\016\001\016\001\016\001\
    \016\001\016\001\188\000\000\000\000\000\190\000\000\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\210\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\000\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\212\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\211\000\211\000\
    \211\000\211\000\211\000\211\000\211\000\211\000\211\000\211\000\
    \000\000\209\000\000\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\213\000\000\000\000\000\
    \255\255\021\001\000\000\000\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\000\000\
    \000\000\000\000\000\000\209\000\000\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\011\001\000\000\000\000\
    \010\001\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\000\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\000\000\009\001\009\001\009\001\009\001\009\001\
    \009\001\009\001\009\001\009\001\009\001\000\000\005\001\000\000\
    \000\000\004\001\000\000\000\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\255\255\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\008\001\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\242\000\253\000\000\000\241\000\
    \252\000\015\001\000\000\000\000\000\000\000\000\000\000\000\000\
    \006\001\000\000\014\001\014\001\014\001\014\001\014\001\014\001\
    \014\001\014\001\014\001\014\001\244\000\255\000\015\001\000\000\
    \000\000\243\000\245\000\000\000\246\000\000\000\000\000\017\001\
    \017\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\
    \017\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \017\001\017\001\017\001\017\001\017\001\017\001\018\001\018\001\
    \018\001\018\001\018\001\018\001\018\001\018\001\018\001\018\001\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\001\
    \018\001\018\001\018\001\018\001\018\001\000\000\000\000\254\000\
    \017\001\017\001\017\001\017\001\017\001\017\001\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\001\
    \018\001\018\001\018\001\018\001\018\001\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\240\000\251\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\006\000\005\000\000\000\094\000\099\000\
    \105\000\116\000\179\000\241\000\252\000\093\000\095\000\001\001\
    \093\000\095\000\022\001\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\005\000\255\255\000\000\255\255\003\001\
    \000\000\000\000\000\000\000\000\000\000\008\000\016\000\000\000\
    \098\000\107\000\008\000\121\000\145\000\186\000\095\000\207\000\
    \245\000\020\000\000\000\000\000\000\000\000\000\005\000\000\000\
    \109\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\110\000\246\000\005\001\007\001\000\000\
    \077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\020\000\023\000\024\000\
    \020\000\025\000\020\000\020\000\020\000\026\000\020\000\020\000\
    \020\000\027\000\028\000\029\000\030\000\031\000\032\000\020\000\
    \033\000\034\000\025\000\036\000\038\000\025\000\030\000\039\000\
    \041\000\042\000\043\000\045\000\046\000\047\000\048\000\049\000\
    \050\000\052\000\053\000\054\000\056\000\057\000\058\000\059\000\
    \061\000\062\000\063\000\065\000\066\000\067\000\068\000\069\000\
    \070\000\072\000\073\000\074\000\075\000\078\000\079\000\080\000\
    \081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\089\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\122\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\093\000\095\000\126\000\127\000\130\000\
    \131\000\131\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\132\000\133\000\102\000\134\000\
    \009\000\102\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\102\000\128\000\135\000\136\000\
    \137\000\102\000\128\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\138\000\139\000\140\000\
    \141\000\141\000\102\000\142\000\143\000\144\000\152\000\153\000\
    \154\000\155\000\113\000\156\000\157\000\113\000\148\000\148\000\
    \148\000\148\000\148\000\148\000\148\000\148\000\148\000\148\000\
    \158\000\159\000\161\000\162\000\163\000\164\000\165\000\102\000\
    \166\000\167\000\113\000\168\000\113\000\113\000\169\000\113\000\
    \113\000\113\000\170\000\171\000\172\000\173\000\174\000\188\000\
    \189\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \192\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \194\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\113\000\190\000\113\000\193\000\193\000\
    \195\000\190\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\196\000\197\000\198\000\199\000\
    \010\000\200\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\201\000\202\000\149\000\203\000\
    \203\000\204\000\205\000\206\000\102\000\149\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\149\000\149\000\191\000\
    \191\000\191\000\191\000\191\000\191\000\191\000\191\000\191\000\
    \191\000\214\000\176\000\215\000\216\000\176\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\210\000\
    \217\000\218\000\219\000\220\000\221\000\223\000\224\000\225\000\
    \226\000\227\000\176\000\228\000\176\000\229\000\230\000\176\000\
    \176\000\176\000\231\000\232\000\233\000\234\000\235\000\236\000\
    \113\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \146\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \011\001\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\120\000\120\000\120\000\120\000\120\000\120\000\120\000\
    \120\000\120\000\120\000\176\000\013\001\176\000\016\001\018\001\
    \255\255\255\255\004\001\146\000\010\001\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\004\001\
    \147\000\010\001\255\255\255\255\255\255\255\255\120\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\120\000\254\000\019\001\120\000\254\000\019\001\255\255\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\255\255\255\255\255\255\255\255\147\000\255\255\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\183\000\183\000\183\000\183\000\183\000\183\000\
    \183\000\183\000\183\000\183\000\255\255\255\255\255\255\255\255\
    \176\000\255\255\255\255\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\255\255\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\255\255\255\255\255\255\183\000\
    \014\001\014\001\014\001\014\001\014\001\014\001\014\001\014\001\
    \014\001\014\001\183\000\255\255\255\255\183\000\255\255\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\208\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\255\255\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\211\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\211\000\211\000\
    \211\000\211\000\211\000\211\000\211\000\211\000\211\000\211\000\
    \255\255\208\000\255\255\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\208\000\208\000\208\000\209\000\255\255\255\255\
    \254\000\019\001\255\255\255\255\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\255\255\
    \255\255\255\255\255\255\209\000\255\255\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\006\001\255\255\255\255\
    \006\001\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\255\255\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\255\255\006\001\006\001\006\001\006\001\006\001\
    \006\001\006\001\006\001\006\001\006\001\255\255\002\001\255\255\
    \255\255\002\001\255\255\255\255\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\002\001\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\006\001\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\238\000\249\000\255\255\238\000\
    \249\000\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
    \002\001\255\255\009\001\009\001\009\001\009\001\009\001\009\001\
    \009\001\009\001\009\001\009\001\238\000\249\000\008\001\255\255\
    \255\255\238\000\238\000\255\255\238\000\255\255\255\255\008\001\
    \008\001\008\001\008\001\008\001\008\001\008\001\008\001\008\001\
    \008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \008\001\008\001\008\001\008\001\008\001\008\001\017\001\017\001\
    \017\001\017\001\017\001\017\001\017\001\017\001\017\001\017\001\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
    \017\001\017\001\017\001\017\001\017\001\255\255\255\255\249\000\
    \008\001\008\001\008\001\008\001\008\001\008\001\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
    \017\001\017\001\017\001\017\001\017\001\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\001\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\238\000\249\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\020\000\095\000\009\000\019\000\023\000\032\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\038\000\000\000\000\000\000\000\000\000\001\000\
    \018\001\093\001\029\000\039\000\023\000\032\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \039\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_backtrk_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_default_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_trans_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \011\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \014\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\017\000\001\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\001\000\001\000\001\000\000\000\000\000\000\000\000\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\000\000\000\000\000\000\000\000\017\000\000\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\000\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\014\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\000\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\017\000\000\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \000\000\000\000\000\000\000\000\017\000\000\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\000\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\000\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\000\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\000\000";
  Lexing.lex_check_code = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \145\000\207\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \146\000\148\000\148\000\148\000\148\000\148\000\148\000\148\000\
    \148\000\148\000\148\000\149\000\149\000\149\000\149\000\149\000\
    \149\000\149\000\149\000\149\000\149\000\210\000\210\000\210\000\
    \210\000\210\000\210\000\210\000\210\000\210\000\210\000\211\000\
    \211\000\211\000\211\000\211\000\211\000\211\000\211\000\211\000\
    \211\000\255\255\255\255\255\255\163\000\225\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\146\000\140\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\162\000\202\000\224\000\255\255\255\255\255\255\255\255\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\255\255\255\255\255\255\255\255\147\000\255\255\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\255\255\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\208\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\255\255\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\208\000\255\255\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\208\000\208\000\208\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \255\255\255\255\255\255\255\255\209\000\255\255\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\255\255\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\255\255\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\255\255\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\255\255";
  Lexing.lex_code = 
   "\255\005\255\255\004\255\002\255\000\005\255\006\255\255\008\255\
    \255\007\255\255\009\255\255\004\255\000\005\002\008\001\009\255\
    \002\255\004\006\003\007\000\005\255";
}

let rec main lexbuf =
    __ocaml_lex_main_rec lexbuf 0
and __ocaml_lex_main_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 354 "lexer.mll"
    ( TOKEN )
# 1082 "lexer.ml"

  | 1 ->
# 356 "lexer.mll"
    ( TYPE )
# 1087 "lexer.ml"

  | 2 ->
# 358 "lexer.mll"
    ( LEFT )
# 1092 "lexer.ml"

  | 3 ->
# 360 "lexer.mll"
    ( RIGHT )
# 1097 "lexer.ml"

  | 4 ->
# 362 "lexer.mll"
    ( NONASSOC )
# 1102 "lexer.ml"

  | 5 ->
# 364 "lexer.mll"
    ( START )
# 1107 "lexer.ml"

  | 6 ->
# 366 "lexer.mll"
    ( PREC )
# 1112 "lexer.ml"

  | 7 ->
# 368 "lexer.mll"
    ( PUBLIC )
# 1117 "lexer.ml"

  | 8 ->
# 370 "lexer.mll"
    ( PARAMETER )
# 1122 "lexer.ml"

  | 9 ->
# 372 "lexer.mll"
    ( INLINE )
# 1127 "lexer.ml"

  | 10 ->
# 374 "lexer.mll"
    ( ON_ERROR_REDUCE )
# 1132 "lexer.ml"

  | 11 ->
# 376 "lexer.mll"
    ( (* The token [PERCENTPERCENT] carries a stretch that contains
         everything that follows %% in the input file. This string
         must be created lazily. The parser decides (based on the
         context) whether this stretch is needed. If it is indeed
         needed, then constructing this stretch drives the lexer
         to the end of the file. *)
      PERCENTPERCENT (lazy (
        let openingpos = lexeme_end_p lexbuf in
        let closingpos = finish lexbuf in
        mk_stretch openingpos closingpos false []
      )) )
# 1147 "lexer.ml"

  | 12 ->
# 388 "lexer.mll"
    ( COLON )
# 1152 "lexer.ml"

  | 13 ->
# 390 "lexer.mll"
    ( COMMA )
# 1157 "lexer.ml"

  | 14 ->
# 392 "lexer.mll"
    ( EQUAL )
# 1162 "lexer.ml"

  | 15 ->
# 394 "lexer.mll"
    ( LPAREN )
# 1167 "lexer.ml"

  | 16 ->
# 396 "lexer.mll"
    ( RPAREN )
# 1172 "lexer.ml"

  | 17 ->
# 398 "lexer.mll"
    ( BAR )
# 1177 "lexer.ml"

  | 18 ->
# 400 "lexer.mll"
    ( QUESTION )
# 1182 "lexer.ml"

  | 19 ->
# 402 "lexer.mll"
    ( STAR )
# 1187 "lexer.ml"

  | 20 ->
# 404 "lexer.mll"
    ( PLUS )
# 1192 "lexer.ml"

  | 21 ->
let
# 405 "lexer.mll"
                             id
# 1198 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 406 "lexer.mll"
    ( if Hashtbl.mem reserved id then
        error2 lexbuf "this is an OCaml reserved word."
      else
        LID (with_pos (cpos lexbuf) id)
    )
# 1206 "lexer.ml"

  | 22 ->
let
# 411 "lexer.mll"
                             id
# 1212 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 412 "lexer.mll"
    ( UID (with_pos (cpos lexbuf) id) )
# 1216 "lexer.ml"

  | 23 ->
# 415 "lexer.mll"
    ( new_line lexbuf; main lexbuf )
# 1221 "lexer.ml"

  | 24 ->
# 417 "lexer.mll"
    ( main lexbuf )
# 1226 "lexer.ml"

  | 25 ->
# 419 "lexer.mll"
    ( comment (lexeme_start_p lexbuf) lexbuf; main lexbuf )
# 1231 "lexer.ml"

  | 26 ->
# 421 "lexer.mll"
    ( ocamlcomment (lexeme_start_p lexbuf) lexbuf; main lexbuf )
# 1236 "lexer.ml"

  | 27 ->
# 423 "lexer.mll"
    ( savestart lexbuf (ocamltype (lexeme_end_p lexbuf)) )
# 1241 "lexer.ml"

  | 28 ->
# 425 "lexer.mll"
    ( savestart lexbuf (fun lexbuf ->
        let openingpos = lexeme_end_p lexbuf in
        let closingpos, monsters = action true openingpos [] lexbuf in
        no_monsters monsters;
        HEADER (mk_stretch openingpos closingpos false [])
      ) )
# 1251 "lexer.ml"

  | 29 ->
# 432 "lexer.mll"
    ( savestart lexbuf (fun lexbuf ->
        let openingpos = lexeme_end_p lexbuf in
        let closingpos, monsters = action false openingpos [] lexbuf in
        ACTION (
          fun (producers : string option array) ->
            List.iter (fun monster -> monster.check producers) monsters;
            let stretch = mk_stretch openingpos closingpos true monsters in
            Action.from_stretch stretch
        )
      ) )
# 1265 "lexer.ml"

  | 30 ->
# 443 "lexer.mll"
    ( EOF )
# 1270 "lexer.ml"

  | 31 ->
# 445 "lexer.mll"
    ( error2 lexbuf "unexpected character(s)." )
# 1275 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_main_rec lexbuf __ocaml_lex_state

and comment openingpos lexbuf =
    __ocaml_lex_comment_rec openingpos lexbuf 95
and __ocaml_lex_comment_rec openingpos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 453 "lexer.mll"
    ( new_line lexbuf; comment openingpos lexbuf )
# 1287 "lexer.ml"

  | 1 ->
# 455 "lexer.mll"
    ( () )
# 1292 "lexer.ml"

  | 2 ->
# 457 "lexer.mll"
    ( error1 openingpos "unterminated comment." )
# 1297 "lexer.ml"

  | 3 ->
# 459 "lexer.mll"
    ( comment openingpos lexbuf )
# 1302 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec openingpos lexbuf __ocaml_lex_state

and ocamltype openingpos lexbuf =
    __ocaml_lex_ocamltype_rec openingpos lexbuf 102
and __ocaml_lex_ocamltype_rec openingpos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 470 "lexer.mll"
    ( ocamltype openingpos lexbuf )
# 1314 "lexer.ml"

  | 1 ->
# 472 "lexer.mll"
    ( OCAMLTYPE (Stretch.Declared (mk_stretch openingpos (lexeme_start_p lexbuf) true [])) )
# 1319 "lexer.ml"

  | 2 ->
# 474 "lexer.mll"
    ( ocamlcomment (lexeme_start_p lexbuf) lexbuf; ocamltype openingpos lexbuf )
# 1324 "lexer.ml"

  | 3 ->
# 476 "lexer.mll"
    ( new_line lexbuf; ocamltype openingpos lexbuf )
# 1329 "lexer.ml"

  | 4 ->
# 478 "lexer.mll"
    ( error1 openingpos "unterminated OCaml type." )
# 1334 "lexer.ml"

  | 5 ->
# 480 "lexer.mll"
    ( ocamltype openingpos lexbuf )
# 1339 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_ocamltype_rec openingpos lexbuf __ocaml_lex_state

and action percent openingpos monsters lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 10 (-1) ;   __ocaml_lex_action_rec percent openingpos monsters lexbuf 113
and __ocaml_lex_action_rec percent openingpos monsters lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 491 "lexer.mll"
    ( let _, monsters = action false (lexeme_end_p lexbuf) monsters lexbuf in
      action percent openingpos monsters lexbuf )
# 1352 "lexer.ml"

  | 1 ->
let
# 493 "lexer.mll"
                  delimiter
# 1358 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 494 "lexer.mll"
    ( match percent, delimiter with
      | true, "%}"
      | false, "}" ->
          (* This is the delimiter we were instructed to look for. *)
          lexeme_start_p lexbuf, monsters
      | _, _ ->
          (* This is not it. *)
          error1 openingpos "unbalanced opening brace."
    )
# 1370 "lexer.ml"

  | 2 ->
# 504 "lexer.mll"
    ( let _, monsters = parentheses (lexeme_end_p lexbuf) monsters lexbuf in
      action percent openingpos monsters lexbuf )
# 1376 "lexer.ml"

  | 3 ->
let
# 506 "lexer.mll"
                     i
# 1382 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 507 "lexer.mll"
    ( let monster = dollar (cpos lexbuf) (int_of_string i) in
      action percent openingpos (monster :: monsters) lexbuf )
# 1387 "lexer.ml"

  | 4 ->
let
# 338 "lexer.mll"
                                        where
# 1393 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_mem.(0)
and
# 339 "lexer.mll"
                      flavor
# 1398 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) (lexbuf.Lexing.lex_mem.(0) + 3)
and
# 340 "lexer.mll"
                             i
# 1403 "lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_mem.(1)
and
# 340 "lexer.mll"
                                                             x
# 1408 "lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(4) lexbuf.Lexing.lex_mem.(3) in
# 510 "lexer.mll"
    ( let monster = position (cpos lexbuf) where flavor i x in
      action percent openingpos (monster :: monsters) lexbuf )
# 1413 "lexer.ml"

  | 5 ->
# 513 "lexer.mll"
    ( error2 lexbuf "$previouserror is no longer supported." )
# 1418 "lexer.ml"

  | 6 ->
# 515 "lexer.mll"
    ( let monster = syntaxerror (cpos lexbuf) in
      action percent openingpos (monster :: monsters) lexbuf )
# 1424 "lexer.ml"

  | 7 ->
# 518 "lexer.mll"
    ( string (lexeme_start_p lexbuf) lexbuf;
      action percent openingpos monsters lexbuf )
# 1430 "lexer.ml"

  | 8 ->
# 521 "lexer.mll"
    ( char lexbuf;
      action percent openingpos monsters lexbuf )
# 1436 "lexer.ml"

  | 9 ->
# 524 "lexer.mll"
    ( ocamlcomment (lexeme_start_p lexbuf) lexbuf;
      action percent openingpos monsters lexbuf )
# 1442 "lexer.ml"

  | 10 ->
# 527 "lexer.mll"
    ( new_line lexbuf;
      action percent openingpos monsters lexbuf )
# 1448 "lexer.ml"

  | 11 ->
# 531 "lexer.mll"
    ( error1 openingpos "unbalanced opening brace." )
# 1453 "lexer.ml"

  | 12 ->
# 533 "lexer.mll"
    ( action percent openingpos monsters lexbuf )
# 1458 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_action_rec percent openingpos monsters lexbuf __ocaml_lex_state

and parentheses openingpos monsters lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 10 (-1) ;   __ocaml_lex_parentheses_rec openingpos monsters lexbuf 176
and __ocaml_lex_parentheses_rec openingpos monsters lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 539 "lexer.mll"
    ( let _, monsters = parentheses (lexeme_end_p lexbuf) monsters lexbuf in
      parentheses openingpos monsters lexbuf )
# 1471 "lexer.ml"

  | 1 ->
# 542 "lexer.mll"
    ( lexeme_start_p lexbuf, monsters )
# 1476 "lexer.ml"

  | 2 ->
# 544 "lexer.mll"
    ( let _, monsters = action false (lexeme_end_p lexbuf) monsters lexbuf in
      parentheses openingpos monsters lexbuf )
# 1482 "lexer.ml"

  | 3 ->
let
# 546 "lexer.mll"
                     i
# 1488 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 547 "lexer.mll"
    ( let monster = dollar (cpos lexbuf) (int_of_string i) in
      parentheses openingpos (monster :: monsters) lexbuf )
# 1493 "lexer.ml"

  | 4 ->
let
# 338 "lexer.mll"
                                        where
# 1499 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_mem.(0)
and
# 339 "lexer.mll"
                      flavor
# 1504 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) (lexbuf.Lexing.lex_mem.(0) + 3)
and
# 340 "lexer.mll"
                             i
# 1509 "lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_mem.(1)
and
# 340 "lexer.mll"
                                                             x
# 1514 "lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(4) lexbuf.Lexing.lex_mem.(3) in
# 550 "lexer.mll"
    ( let monster = position (cpos lexbuf) where flavor i x in
      parentheses openingpos (monster :: monsters) lexbuf )
# 1519 "lexer.ml"

  | 5 ->
# 553 "lexer.mll"
    ( error2 lexbuf "$previouserror is no longer supported." )
# 1524 "lexer.ml"

  | 6 ->
# 555 "lexer.mll"
    ( let monster = syntaxerror (cpos lexbuf) in
      parentheses openingpos (monster :: monsters) lexbuf )
# 1530 "lexer.ml"

  | 7 ->
# 558 "lexer.mll"
    ( string (lexeme_start_p lexbuf) lexbuf; parentheses openingpos monsters lexbuf )
# 1535 "lexer.ml"

  | 8 ->
# 560 "lexer.mll"
    ( char lexbuf; parentheses openingpos monsters lexbuf )
# 1540 "lexer.ml"

  | 9 ->
# 562 "lexer.mll"
    ( ocamlcomment (lexeme_start_p lexbuf) lexbuf; parentheses openingpos monsters lexbuf )
# 1545 "lexer.ml"

  | 10 ->
# 564 "lexer.mll"
    ( new_line lexbuf; parentheses openingpos monsters lexbuf )
# 1550 "lexer.ml"

  | 11 ->
# 567 "lexer.mll"
    ( error1 openingpos "unbalanced opening parenthesis." )
# 1555 "lexer.ml"

  | 12 ->
# 569 "lexer.mll"
    ( parentheses openingpos monsters lexbuf )
# 1560 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_parentheses_rec openingpos monsters lexbuf __ocaml_lex_state

and ocamlcomment openingpos lexbuf =
    __ocaml_lex_ocamlcomment_rec openingpos lexbuf 238
and __ocaml_lex_ocamlcomment_rec openingpos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 581 "lexer.mll"
    ( () )
# 1572 "lexer.ml"

  | 1 ->
# 583 "lexer.mll"
    ( ocamlcomment (lexeme_start_p lexbuf) lexbuf; ocamlcomment openingpos lexbuf )
# 1577 "lexer.ml"

  | 2 ->
# 585 "lexer.mll"
    ( string (lexeme_start_p lexbuf) lexbuf; ocamlcomment openingpos lexbuf )
# 1582 "lexer.ml"

  | 3 ->
# 587 "lexer.mll"
    ( char lexbuf; ocamlcomment openingpos lexbuf )
# 1587 "lexer.ml"

  | 4 ->
# 589 "lexer.mll"
    ( new_line lexbuf; ocamlcomment openingpos lexbuf )
# 1592 "lexer.ml"

  | 5 ->
# 591 "lexer.mll"
    ( error1 openingpos "unterminated OCaml comment." )
# 1597 "lexer.ml"

  | 6 ->
# 593 "lexer.mll"
    ( ocamlcomment openingpos lexbuf )
# 1602 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_ocamlcomment_rec openingpos lexbuf __ocaml_lex_state

and string openingpos lexbuf =
    __ocaml_lex_string_rec openingpos lexbuf 249
and __ocaml_lex_string_rec openingpos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 601 "lexer.mll"
   ( () )
# 1614 "lexer.ml"

  | 1 ->
# 604 "lexer.mll"
   ( new_line lexbuf; string openingpos lexbuf )
# 1619 "lexer.ml"

  | 2 ->
# 608 "lexer.mll"
   ( string openingpos lexbuf )
# 1624 "lexer.ml"

  | 3 ->
# 610 "lexer.mll"
   ( error1 openingpos "unterminated OCaml string." )
# 1629 "lexer.ml"

  | 4 ->
# 612 "lexer.mll"
   ( string openingpos lexbuf )
# 1634 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_string_rec openingpos lexbuf __ocaml_lex_state

and char lexbuf =
    __ocaml_lex_char_rec lexbuf 258
and __ocaml_lex_char_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 622 "lexer.mll"
   ( new_line lexbuf )
# 1646 "lexer.ml"

  | 1 ->
# 628 "lexer.mll"
   ( () )
# 1651 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_char_rec lexbuf __ocaml_lex_state

and finish lexbuf =
    __ocaml_lex_finish_rec lexbuf 275
and __ocaml_lex_finish_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 639 "lexer.mll"
    ( new_line lexbuf; finish lexbuf )
# 1663 "lexer.ml"

  | 1 ->
# 641 "lexer.mll"
    ( lexeme_start_p lexbuf )
# 1668 "lexer.ml"

  | 2 ->
# 643 "lexer.mll"
    ( finish lexbuf )
# 1673 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_finish_rec lexbuf __ocaml_lex_state

;;

