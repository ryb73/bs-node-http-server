{
  "_args": [
    [
      {
        "raw": "ppx_tools_versioned-actual@git://github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
        "scope": null,
        "escapedName": "ppx_tools_versioned-actual",
        "name": "ppx_tools_versioned-actual",
        "rawSpec": "git://github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
        "spec": "git://github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:npm-opam/ppx_tools_versioned.git#5.0.0",
          "sshUrl": "git+ssh://git@github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
          "httpsUrl": "git+https://github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
          "gitUrl": "git://github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
          "shortcut": "github:npm-opam/ppx_tools_versioned#5.0.0",
          "directUrl": "https://raw.githubusercontent.com/npm-opam/ppx_tools_versioned/5.0.0/package.json"
        }
      },
      "/Users/ryan/Personal/proj/bs-node-http-server/node_modules/@opam-alpha/ppx_tools_versioned"
    ]
  ],
  "_from": "git://github.com/npm-opam/ppx_tools_versioned.git#26459b24f731053e34eab96535bfd265b67406af",
  "_id": "ppx_tools_versioned-actual@5.0.0",
  "_inCache": true,
  "_location": "/ppx_tools_versioned-actual",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ppx_tools_versioned-actual@git://github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
    "scope": null,
    "escapedName": "ppx_tools_versioned-actual",
    "name": "ppx_tools_versioned-actual",
    "rawSpec": "git://github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
    "spec": "git://github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:npm-opam/ppx_tools_versioned.git#5.0.0",
      "sshUrl": "git+ssh://git@github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
      "httpsUrl": "git+https://github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
      "gitUrl": "git://github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
      "shortcut": "github:npm-opam/ppx_tools_versioned#5.0.0",
      "directUrl": "https://raw.githubusercontent.com/npm-opam/ppx_tools_versioned/5.0.0/package.json"
    }
  },
  "_requiredBy": [
    "/@opam-alpha/ppx_tools_versioned"
  ],
  "_resolved": "git://github.com/npm-opam/ppx_tools_versioned.git#26459b24f731053e34eab96535bfd265b67406af",
  "_shasum": "0d692258ea236ced57cd8b69b4e442348a8039b1",
  "_shrinkwrap": null,
  "_spec": "ppx_tools_versioned-actual@git://github.com/npm-opam/ppx_tools_versioned.git#5.0.0",
  "_where": "/Users/ryan/Personal/proj/bs-node-http-server/node_modules/@opam-alpha/ppx_tools_versioned",
  "dependencies": {
    "@opam-alpha/ocaml-migrate-parsetree": ">= 0.5.0",
    "@opam-alpha/ocamlfind": ">= 1.5.0",
    "dependency-env": "*",
    "nopam": "*",
    "opam-installer-bin": "git+https://github.com/yunxing/opam-installer-bin.git",
    "substs": "git+https://github.com/yunxing/substs.git"
  },
  "description": "ppx_tools =========",
  "devDependencies": {},
  "exportedEnvVars": {
    "CAML_LD_LIBRARY_PATH": {
      "global": true,
      "resolveAsRelativePath": true,
      "globalCollisionBehavior": "joinPath",
      "val": "./_build/ocamlfind/lib/stublibs"
    },
    "ppx_tools_versioned_version": {
      "global": true,
      "globalCollisionBehavior": "clobber",
      "val": "5.0.0"
    },
    "ppx_tools_versioned_enable": {
      "global": true,
      "globalCollisionBehavior": "clobber",
      "val": "enable"
    },
    "FINDLIB": {
      "global": true,
      "resolveAsRelativePath": true,
      "globalCollisionBehavior": "joinPath",
      "val": "./_build/ocamlfind/lib"
    },
    "version": {
      "global": true,
      "globalCollisionBehavior": "clobber",
      "val": "5.0.0"
    },
    "ppx_tools_versioned_installed": {
      "global": true,
      "globalCollisionBehavior": "clobber",
      "val": "true"
    },
    "PATH": {
      "global": true,
      "resolveAsRelativePath": true,
      "globalCollisionBehavior": "joinPath",
      "val": "./_build/ocamlfind/bin"
    }
  },
  "gitHead": "26459b24f731053e34eab96535bfd265b67406af",
  "name": "ppx_tools_versioned-actual",
  "optionalDependencies": {},
  "peerDependencies": {
    "@opam-alpha/ocaml": ">= 4.02.0"
  },
  "readme": "ppx_tools\n=========\n\nTools for authors of syntactic tools (such as ppx rewriters).\n\nThis package is licensed by LexiFi under the terms of the MIT license.\n\nThe tools are installed as a findlib package called 'ppx_tools'.\nExecutables are thus accessible through the ocamlfind driver (e.g.:\nocamlfind ppx_tools/dumpast).\n\nMain contributors:\n\n  - Alain Frisch\n  - Peter Zotov (whitequark)\n  - Gabriel Radanne (Drup)\n\nMaster : [![Build Status](https://travis-ci.org/alainfrisch/ppx_tools.svg?branch=master)](https://travis-ci.org/alainfrisch/ppx_tools)\n\n4.05 : [![Build Status](https://travis-ci.org/alainfrisch/ppx_tools.svg?branch=4.05)](https://travis-ci.org/alainfrisch/ppx_tools)\n\n4.04 : [![Build Status](https://travis-ci.org/alainfrisch/ppx_tools.svg?branch=4.04)](https://travis-ci.org/alainfrisch/ppx_tools)\n\n4.03 : [![Build Status](https://travis-ci.org/alainfrisch/ppx_tools.svg?branch=4.03)](https://travis-ci.org/alainfrisch/ppx_tools)\n\n4.02 : [![Build Status](https://travis-ci.org/alainfrisch/ppx_tools.svg?branch=4.02)](https://travis-ci.org/alainfrisch/ppx_tools)\n\nppx_metaquot\n------------\n\nA ppx filter to help writing programs which manipulate the Parsetree,\nby allowing the programmer to use concrete syntax for expressions\ncreating Parsetree fragments and patterns deconstructing Parsetree\nfragments.  See the top of ppx_metaquot.ml for a description of the\nsupported extensions.\n\nUsage:\n\n    ocamlfind ocamlc -c -package ppx_tools.metaquot my_ppx_code.ml\n\n\nrewriter\n--------\n\nAn utility to help testing ppx rewriters that runs the rewriter on\nuser-provided code and returns the result.\n\nUsage:\n\n    ocamlfind ppx_tools/rewriter ./my_ppx_rewriter sample.ml\n\nSee the integrated help message for more details:\n\n    ocamlfind ppx_tools/rewriter -help\n\n\nAst_mapper_class\n----------------\n\nThis module implements an API similar to Ast_mapper from the\ncompiler-libs, i.e. a generic mapper from Parsetree to Parsetree\nimplemeting a deep identity copy, which can be customized with a\ncustom behavior for each syntactic category.  The difference with\nAst_mapper is that Ast_mapper_class implements the open recursion\nusing a class.\n\n\ndumpast\n-------\n\nThis tool parses fragments of OCaml code (or entire source files) and\ndump the resulting internal Parsetree representation.  Intended uses:\n\n - Help to learn about the OCaml Parsetree structure and how it\n   corresponds to OCaml source syntax.\n\n - Create fragments of Parsetree to be copy-pasted into the source\n   code of syntax-manipulating programs (such as ppx rewriters).\n\nUsage:\n\n    ocamlfind ppx_tools/dumpast -e \"1 + 2\"\n\nThe tool can be used to show the Parsetree representation of small\nfragments of syntax passed on the command line (-e for expressions, -p\nfor patterns, -t for type expressions) or for entire .ml/mli files.\nThe standard -pp and -ppx options are supported, but only applied on\nwhole files.  The tool has further option to control how location and\nattribute fields in the Parsetree should be displayed.\n\n\ngenlifter\n---------\n\nThis tool generates a virtual \"lifter\" class for one or several OCaml\ntype constructors.  It does so by loading the .cmi files which define\nthose types.  The generated lifter class exposes one method to \"reify\"\ntype constructors passed on the command-line and other type\nconstructors accessible from them.  The class is parametrized over the\ntarget type of the reification, and it must provide method to deal\nwith basic types (int, string, char, int32, int64, nativeint) and data\ntype builders (record, constr, tuple, list, array).  As an example,\ncalling:\n\n    ocamlfind ppx_tools/genlifter -I +compiler-libs Location.t\n\nproduces the following class:\n\n    class virtual ['res] lifter =\n      object (this)\n        method lift_Location_t : Location.t -> 'res=\n          fun\n            { Location.loc_start = loc_start; Location.loc_end = loc_end;\n              Location.loc_ghost = loc_ghost }\n             ->\n            this#record \"Location.t\"\n              [(\"loc_start\", (this#lift_Lexing_position loc_start));\n              (\"loc_end\", (this#lift_Lexing_position loc_end));\n              (\"loc_ghost\", (this#lift_bool loc_ghost))]\n        method lift_bool : bool -> 'res=\n          function\n          | false  -> this#constr \"bool\" (\"false\", [])\n          | true  -> this#constr \"bool\" (\"true\", [])\n        method lift_Lexing_position : Lexing.position -> 'res=\n          fun\n            { Lexing.pos_fname = pos_fname; Lexing.pos_lnum = pos_lnum;\n              Lexing.pos_bol = pos_bol; Lexing.pos_cnum = pos_cnum }\n             ->\n            this#record \"Lexing.position\"\n              [(\"pos_fname\", (this#string pos_fname));\n              (\"pos_lnum\", (this#int pos_lnum));\n              (\"pos_bol\", (this#int pos_bol));\n              (\"pos_cnum\", (this#int pos_cnum))]\n      end\n\n_dumpast_ is a direct example of using _genlifter_ applied on the\nOCaml Parsetree definition itself.  ppx_metaquot is another\nsimilar example.\n",
  "readmeFilename": "README.md",
  "scripts": {
    "postinstall": "eval $(dependencyEnv) && nopam && make all && make install && (opam-installer --prefix=$opam_prefix || true)"
  },
  "version": "5.0.0"
}
