{
  "_args": [
    [
      {
        "raw": "bs-platform@1.7.1",
        "scope": null,
        "escapedName": "bs-platform",
        "name": "bs-platform",
        "rawSpec": "1.7.1",
        "spec": "1.7.1",
        "type": "version"
      },
      "/Users/ryan/Personal/proj/bs-node-http-server"
    ]
  ],
  "_from": "bs-platform@1.7.1",
  "_id": "bs-platform@1.7.1",
  "_inCache": true,
  "_location": "/bs-platform",
  "_nodeVersion": "6.9.5",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/bs-platform-1.7.1.tgz_1492520905537_0.42613403825089335"
  },
  "_npmUser": {
    "name": "hongbo_zhang",
    "email": "bobzhang1988@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bs-platform@1.7.1",
    "scope": null,
    "escapedName": "bs-platform",
    "name": "bs-platform",
    "rawSpec": "1.7.1",
    "spec": "1.7.1",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/bs-platform/-/bs-platform-1.7.1.tgz",
  "_shasum": "e05b0ca466115a0374d89141ba749b66a8e4ac07",
  "_shrinkwrap": null,
  "_spec": "bs-platform@1.7.1",
  "_where": "/Users/ryan/Personal/proj/bs-node-http-server",
  "author": {
    "name": "Hongbo Zhang"
  },
  "bin": {
    "bsb": "bin/bsb"
  },
  "bugs": {
    "url": "https://github.com/bloomberg/bucklescript/issues"
  },
  "dependencies": {},
  "description": "bucklescript compiler, ocaml standard libary by bucklescript and its required runtime support",
  "devDependencies": {
    "benchmark": "^2.1.0",
    "colors": "^1.1.2",
    "coveralls": "^2.11.9",
    "diff": "^2.2.2",
    "glob": "^7.0.3",
    "istanbul": "^0.4.2",
    "jasmine-core": "^2.4.1",
    "karma": "^1.1.2",
    "karma-jasmine-html-reporter": "^0.2.1",
    "mocha": "^2.5.3",
    "mocha-lcov-reporter": "^1.2.0",
    "should": "^10.0.0",
    "should-equal": "^1.0.0",
    "uglify-js": "^2.6.1"
  },
  "directories": {},
  "dist": {
    "shasum": "e05b0ca466115a0374d89141ba749b66a8e4ac07",
    "tarball": "https://registry.npmjs.org/bs-platform/-/bs-platform-1.7.1.tgz"
  },
  "exportedEnvVars": {
    "PATH": {
      "global": true,
      "globalCollisionBehavior": "joinPath",
      "resolveAsRelativePath": true,
      "val": "./bin/"
    }
  },
  "gitHead": "f58ea0a6432dd8769d3352336b985f2deb9e0812",
  "homepage": "https://github.com/bloomberg/bucklescript#readme",
  "keywords": [
    "ocaml",
    "bucklescript",
    "stdlib",
    "functional programming"
  ],
  "license": "SEE LICENSE IN LICENSE",
  "maintainers": [
    {
      "name": "hongbo_zhang",
      "email": "bobzhang1988@gmail.com"
    }
  ],
  "name": "bs-platform",
  "optionalDependencies": {},
  "readme": "[BuckleScript](http://bloomberg.github.io/bucklescript/): A JavaScript backend for [OCaml](https://ocaml.org/) focused on smooth integration and clean generated code.\n\n[![NPM](https://nodei.co/npm/bs-platform.png?compact=true)](https://nodei.co/npm/bs-platform/)\n\n[![Build Status](https://travis-ci.org/bloomberg/bucklescript.svg?branch=master)](https://travis-ci.org/bloomberg/bucklescript)\n[![Coverage Status](https://coveralls.io/repos/github/bloomberg/bucklescript/badge.svg?branch=master)](https://coveralls.io/github/bloomberg/bucklescript?branch=master)\n[![Try Online](https://img.shields.io/badge/try_it-online!-yellow.svg?style=flat-square)](https://bloomberg.github.io/bucklescript/js-demo)\n\n## Try BuckleScript\n\nYou can try BuckleScript directly [in your browser](http://bloomberg.github.io/bucklescript/js-demo/). Write OCaml in the left panel and\nwatch as it instantly compiles to JavaScript shown in the right panel.\n\n\n## Installing BuckleScript\n```\nnpm install bs-platform\n```\nFor more advanced settings, please visit [Installation](./site/docsource/Installation.adoc)\n\nThe BuckleScript installation includes the following:\n\n* OCaml toolchain\n* OCaml standard library compiled to JavaScript\n* `bsc` BuckleScript compiler\n\nInstalling BuckleScript from the npm package places binaries in `./node_modules/.bin`. Installing\nfrom the git repository places them in `./bin`.\n\n\n## Documentation\n\nSee http://bloomberg.github.io/bucklescript/Manual.html for detailed documentation on BuckleScript. If you'd\nlike to contribute content [see here](https://github.com/bloomberg/bucklescript/blob/master/site/docsource)\nfor the documentation source.\n\nSee http://bloomberg.github.io/bucklescript/api/ for Libraries shipped with BuckleScript.\n\n## How BuckleScript Works\n\nBuckleScript leverages the existing OCaml compiler and toolchain to produce JavaScript that closely\nresembles the original OCaml. This has several immediate advantages:\n\n* name mangling is avoided\n* stack traces are preserved\n* OCaml modules are mapped to JavaScript modules\n* OCaml optimizations (e.g., constant folding, DCE, TCO) are reusable\n* OCaml attributes allow fine control over generated JavaScript\n\nThese points make the integration of JavaScript with OCaml very clean and smooth. In this way,\nBuckleScript provides all the benefits of OCaml's excellent compiler and sophisticated type system\nalongside the rich cross-platform JavaScript ecosystem.\n\n## BuckleScript Examples\n\nBasic examples of using BuckleScript are provided below. More extensive examples are available at\nhttps://github.com/bloomberg/bucklescript-addons.\n\n#### An HTTP Server\n\nThis example creates a simple http server. The complete code is available\n[here](https://github.com/BuckleTypes/bs-examples/tree/master/node-http-server).\n\nThe attribute `[@bs]` used in the example below is one of the OCaml attributes mentioned earlier.\nWhen BuckleScript generates code, it may use either a curried (OCaml) or uncurried (JavaScript)\ncalling convention depending on how the code gets optimized. The `[@bs]` attribute can be used to\ndecorate functions and call-sites so that generated code is guaranteed to use the uncurried style.\nThis guarentee eases integration with existing JavaScript code and avoids unnecessary overhead.\n\n##### Input:\n\n```ocaml\nlet port = 3000\nlet hostname = \"127.0.0.1\"\nlet create_server http =\n  let server = http##createServer begin fun [@bs] req resp ->\n      resp##statusCode #= 200;\n      resp##setHeader \"Content-Type\" \"text/plain\";\n      resp##_end \"Hello world\\n\"\n    end\n  in\n  server##listen port hostname begin fun [@bs] () ->\n    Js.log (\"Server running at http://\"^ hostname ^ \":\" ^ Pervasives.string_of_int port ^ \"/\")\n  end\n\nlet () = create_server Http_types.http\n```\n\n##### Output:\n\n```js\n'use strict';\nvar Pervasives = require(\"bs-platform/lib/js/pervasives\");\nvar Http       = require(\"http\");\n\nvar hostname = \"127.0.0.1\";\n\nfunction create_server(http) {\n  var server = http.createServer(function (_, resp) {\n    resp.statusCode = 200;\n    resp.setHeader(\"Content-Type\", \"text/plain\");\n    return resp.end(\"Hello world\\n\");\n  });\n  return server.listen(3000, hostname, function () {\n    console.log(\"Server running at http://\" + (hostname + (\":\" + (Pervasives.string_of_int(3000) + \"/\"))));\n    return /* () */0;\n  });\n}\n\ncreate_server(Http);\n```\n\n#### Immutable Data Structures\n\nThis example demonstrates the use of immutable data structures. The OCaml code uses the BuckleScript\ncompiled OCaml standard library. The JavaScript code, given as a point of comparison, uses the\nFacebook `immutable` library.\n\nThis comparison is somewhat contrived but nevertheless the BuckleScript compiled version has several\nnice characteristics:\n\nExecution Time:\n\n- BuckleScript: 1186ms\n- JavaScript: 3415ms\n\nCompiled Size:\n\n- BuckleScript (production): 899 Bytes\n- JavaScript: 55.3K Bytes\n\n##### BuckleScript (OCaml stdlib)\n\n```Ocaml\nmodule IntMap = Map.Make(struct\n  type t = int\n  let compare (x : int) y = compare x y\nend)\n\nlet test () =\n  let m = ref IntMap.empty in\n  let count = 1000000 in\n  for i = 0 to count do\n    m := IntMap.add i i !m\n  done;\n  for i = 0 to count do\n    ignore (IntMap.find i !m)\n  done\n\nlet () = test()\n```\n\n##### Javascript (facebook `immutable`)\n\n``` js\n'use strict';\n\nvar Immutable = require('immutable');\nvar Map = Immutable.Map;\nvar m = new Map();\n\nfunction test() {\n  var count = 1000000;\n  for(var i = 0; i < count; ++i) {\n    m = m.set(i, i);\n  }\n  for(var j = 0; j < count; ++j) {\n    m.get(j);\n  }\n}\n\ntest();\n```\n\n## Getting Help and Providing Feedback\n\nIf you need help or have a question, comment, or suggestion, please feel free to [open an\nissue](https://github.com/bloomberg/bucklescript/issues).\n\n## Credits\n\n* Thanks to the  [OCaml](https://ocaml.org) team, obviously, without such a beautiful yet practical language, this backend would not exist\n* Thanks to [ninja-build](https://ninja-build.org), BuckleScript also comes with a blazing fast build tool on top of it, `ninja` is a truly [well engineered](http://aosabook.org/en/posa/ninja.html) scalable build tool\n\n## Licensing\n\nSee [COPYING](./COPYING) and [COPYING.LESSER](./COPYING.LESSER)\n\nThe [`ocaml`](ocaml) directory contains the official [OCaml](https://ocaml.org) compiler (version 4.02.3).\nRefer to its copyright and license notices for information about its licensing.\n\nThe [`ninja-build`](ninja-build) directory contains the official [ninja-build](https://github.com/ninja-build/ninja) (version 1.7.2).\nRefer to its copyright and license notices for information about its licensing.\n\nBuckleScript builds on parts of [js_of_ocaml](https://github.com/ocsigen/js_of_ocaml):\n\n* [`jscomp/js_dump.ml`](jscomp/js_dump.ml) (pretty printer)\n* [`jscomp/runtime`](jscomp/runtime)\n\nBuckleScript builds on parts of OCaml:\n\n* [`jscomp/lam_pass_exits.ml`](jscomp/lam_pass_exits.ml)\n* [`jscomp/lam_pass_lets_dce.ml`](jscomp/lam_pass_lets_dce.ml)\n\nThese modules were adapted from [`ocaml/bytecomp/simplif.ml`](ocaml/bytecomp/simplif.ml) for\nJavaScript specific optimization purposes.\n\n* [`jscomp/js_main.ml`](jscomp/js_main.ml)\n\n`jscomp/js_main.ml` is adapted from [`ocaml/driver/main.ml`](ocaml/driver/main.ml). It is not\nactively used but demonstrates that it is easy to assemble a whole compiler using the OCaml compiler\nlibraries. It also shows how to add more compilation flags to a JS backend.\n\n* [`jscomp/stdlib`](jscomp/stdlib)\n\n`jscomp/stdlib` is copied from [`ocaml/stdlib`](ocaml/stdlib). It is compiled to JavaScript and\nincluded with BuckleScript.\n\n* [`jscomp/test`](jscomp/test)\n\n`jscomp/test` is based on [`ocaml/testsuite`](ocaml/testsuite).\n\nBuckleScript unittest builds on parts of [OUnit](http://ounit.forge.ocamlcore.org/)\n\n* [`jscomp/ounit`](jscomp/ounit) is adapted from ounit, the unit test\n  utilities are only used for dev purpose, they are not required for distribution\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bloomberg/bucklescript.git"
  },
  "scripts": {
    "cover": "istanbul cover --report html ./node_modules/.bin/_mocha --   ./jscomp/test/**/*test.js && open coverage/index.html",
    "coverage": "istanbul cover ./node_modules/.bin/_mocha --report lcovonly --  './jscomp/test/*test.js' -R spec",
    "coveralls": "npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info",
    "postinstall": "node scripts/install.js",
    "test": "mocha './jscomp/test/**/*test.js' ",
    "wtest": "mocha './jscomp/test/**/*test.js'  -R spec -w"
  },
  "version": "1.7.1"
}
