# 15 "lexers.mll"
 
exception Error of (string * Loc.location)

let error source lexbuf fmt =
  Printf.ksprintf (fun s ->
    raise (Error (s, Loc.of_lexbuf source lexbuf))
  ) fmt

open Glob_ast

type conf_values =
  { plus_tags   : (string * Loc.location) list;
    minus_tags  : (string * Loc.location) list }

type conf = (Glob.globber * conf_values) list

let empty = { plus_tags = []; minus_tags = [] }

let locate source lexbuf txt =
  (txt, Loc.of_lexbuf source lexbuf)

let sublex lexer s = lexer (Lexing.from_string s)

# 26 "lexers.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\253\255\254\255\001\000\255\255\002\000\007\000\008\000\
    \254\255\012\000\017\000\022\000\033\000\254\255\013\000\003\000\
    \038\000\043\000\018\000\004\000\054\000\059\000\252\255\064\000\
    \069\000\075\000\080\000\090\000\096\000\254\255\023\000\255\255\
    \027\000\086\000\252\255\253\255\102\000\104\000\108\000\255\255\
    \029\000\112\000\253\255\254\255\117\000\123\000\130\000\138\000\
    \145\000\151\000\252\255\253\255\156\000\160\000\164\000\255\255\
    \166\000\175\000\253\255\181\000\182\000\190\000\197\000\203\000\
    \208\000\021\000\253\255\024\000\045\000\060\000\253\255\254\255\
    \068\000\039\000\253\255\065\000\079\000\083\000\253\255\254\255\
    \085\000\218\000\250\255\226\000\252\255\026\000\253\255\235\000\
    \079\001\212\000\251\000\036\001\037\001\109\001\254\255\047\000\
    \255\255\088\001\048\001\115\001\234\000\241\000\023\001\140\001\
    \252\000\001\001\122\001\101\001\006\001\153\001\129\001\215\001\
    \253\255\209\001\230\001\255\001\169\000\010\002\020\002\170\000\
    \031\002\052\002\255\255\063\002\254\255\073\002\252\255\253\255\
    \052\000\254\255\146\001\013\001\180\001\021\001\068\002\104\002\
    \031\001\174\001\116\000\251\255\093\000\143\000\026\003\154\001\
    \254\255\253\255\118\000\072\000\253\255\254\255\145\000\255\255\
    \166\001\254\255\041\000\178\001\189\001\048\000\200\001\210\001\
    \052\000\059\000\074\000\076\000\080\000\139\000\015\002\053\001\
    \164\001\217\001\100\000\088\000\106\000\102\000\113\000\111\000\
    \116\000\128\000\126\000\128\000\184\000\118\002\016\002\045\002\
    \221\001\148\000\141\000\156\000\176\000\175\000\186\000\240\000\
    \149\002\064\001\226\001\088\002\193\000\209\000\208\000\208\000\
    \205\000\228\000\036\001\219\000\041\001\026\001\158\002\077\002\
    \084\002\122\002\244\000\245\000\252\000\250\000\251\000\249\000\
    \011\001\077\001\163\002\098\002\105\002\164\002\025\001\047\001\
    \051\001\041\001\054\001\057\001\086\001\142\001\170\002\109\002\
    \110\002\174\002\188\002\195\002\213\002\219\002\132\002\224\002\
    \228\002\254\255\249\002\188\001\255\255\182\002\253\255\127\002\
    \137\002\194\001\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\002\000\255\255\255\255\255\255\001\000\
    \255\255\000\000\002\000\255\255\255\255\255\255\002\000\002\000\
    \000\000\002\000\255\255\255\255\255\255\255\255\255\255\002\000\
    \002\000\004\000\004\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\001\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\000\002\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\001\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\001\000\003\000\003\000\255\255\255\255\
    \000\000\000\000\255\255\001\000\000\000\255\255\255\255\255\255\
    \000\000\000\000\255\255\001\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\005\000\255\255\002\000\255\255\005\000\
    \005\000\004\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\004\000\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\004\000\255\255\255\255\
    \255\255\001\000\001\000\001\000\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\001\000\255\255\255\255\255\255\255\255\
    \001\000\255\255\000\000\003\000\003\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\003\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\001\000\255\255\
    \255\255\255\255\001\000\001\000\001\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \000\000\001\000\255\255";
  Lexing.lex_default = 
   "\003\000\000\000\000\000\005\000\000\000\005\000\009\000\255\255\
    \000\000\009\000\009\000\009\000\016\000\000\000\255\255\255\255\
    \016\000\016\000\255\255\255\255\016\000\023\000\000\000\023\000\
    \024\000\023\000\023\000\023\000\023\000\000\000\255\255\000\000\
    \032\000\036\000\000\000\000\000\036\000\036\000\036\000\000\000\
    \255\255\042\000\000\000\000\000\048\000\255\255\048\000\255\255\
    \048\000\052\000\000\000\000\000\052\000\052\000\052\000\000\000\
    \255\255\059\000\000\000\059\000\064\000\059\000\064\000\059\000\
    \064\000\068\000\000\000\067\000\068\000\070\000\000\000\000\000\
    \072\000\076\000\000\000\075\000\076\000\078\000\000\000\000\000\
    \080\000\083\000\000\000\090\000\000\000\255\255\000\000\092\000\
    \090\000\255\255\090\000\090\000\092\000\090\000\000\000\255\255\
    \000\000\104\000\092\000\255\255\255\255\255\255\255\255\255\255\
    \104\000\104\000\255\255\255\255\255\255\255\255\090\000\113\000\
    \000\000\113\000\113\000\118\000\116\000\123\000\118\000\119\000\
    \121\000\121\000\000\000\123\000\000\000\126\000\000\000\000\000\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\141\000\000\000\255\255\141\000\255\255\143\000\
    \000\000\000\000\255\255\149\000\000\000\000\000\255\255\000\000\
    \153\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\169\000\255\255\
    \255\255\169\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\184\000\255\255\255\255\
    \184\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \195\000\255\255\255\255\195\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\209\000\255\255\
    \255\255\209\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\221\000\255\255\255\255\221\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\233\000\255\255\
    \255\255\233\000\235\000\235\000\235\000\235\000\255\255\255\255\
    \242\000\000\000\242\000\243\000\000\000\255\255\000\000\255\255\
    \255\255\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\255\255\255\255\001\000\255\255\255\255\
    \010\000\008\000\008\000\010\000\007\000\255\255\255\255\019\000\
    \255\255\255\255\011\000\008\000\019\000\011\000\007\000\011\000\
    \008\000\031\000\011\000\007\000\086\000\031\000\040\000\010\000\
    \030\000\040\000\017\000\015\000\255\255\017\000\014\000\255\255\
    \255\255\011\000\255\255\255\255\020\000\019\000\011\000\020\000\
    \018\000\096\000\001\000\004\000\004\000\040\000\129\000\020\000\
    \019\000\017\000\020\000\018\000\025\000\025\000\255\255\025\000\
    \026\000\255\255\255\255\020\000\255\255\255\255\032\000\031\000\
    \067\000\032\000\030\000\255\255\027\000\027\000\020\000\027\000\
    \028\000\027\000\027\000\025\000\027\000\028\000\024\000\037\000\
    \255\255\075\000\037\000\027\000\027\000\032\000\027\000\028\000\
    \255\255\027\000\027\000\027\000\027\000\028\000\024\000\040\000\
    \027\000\038\000\040\000\024\000\038\000\038\000\037\000\072\000\
    \038\000\045\000\027\000\255\255\045\000\024\000\046\000\255\255\
    \027\000\046\000\034\000\024\000\047\000\142\000\040\000\047\000\
    \038\000\255\255\160\000\046\000\038\000\080\000\046\000\255\255\
    \045\000\160\000\255\255\047\000\255\255\046\000\047\000\161\000\
    \255\255\140\000\255\255\047\000\044\000\255\255\143\000\143\000\
    \053\000\255\255\046\000\053\000\150\000\056\000\162\000\046\000\
    \056\000\054\000\047\000\163\000\054\000\054\000\255\255\056\000\
    \054\000\255\255\056\000\164\000\255\255\165\000\046\000\053\000\
    \061\000\151\000\151\000\061\000\056\000\255\255\255\255\062\000\
    \054\000\255\255\062\000\050\000\054\000\166\000\056\000\063\000\
    \255\255\171\000\063\000\172\000\255\255\173\000\062\000\061\000\
    \255\255\062\000\124\000\122\000\063\000\255\255\062\000\063\000\
    \174\000\255\255\175\000\060\000\255\255\089\000\063\000\176\000\
    \089\000\255\255\255\255\088\000\086\000\062\000\088\000\085\000\
    \177\000\178\000\062\000\063\000\255\255\179\000\180\000\255\255\
    \255\255\255\255\181\000\102\000\089\000\096\000\102\000\062\000\
    \095\000\186\000\088\000\102\000\255\255\087\000\103\000\187\000\
    \002\000\255\255\255\255\013\000\013\000\255\255\096\000\255\255\
    \255\255\095\000\102\000\107\000\255\255\013\000\106\000\188\000\
    \089\000\255\255\013\000\109\000\082\000\066\000\255\255\134\000\
    \255\255\189\000\135\000\029\000\089\000\039\000\190\000\134\000\
    \102\000\013\000\135\000\102\000\089\000\097\000\255\255\074\000\
    \191\000\130\000\192\000\013\000\137\000\255\255\102\000\096\000\
    \108\000\103\000\095\000\197\000\198\000\089\000\013\000\102\000\
    \199\000\200\000\100\000\022\000\071\000\099\000\110\000\168\000\
    \255\255\255\255\167\000\201\000\255\255\029\000\101\000\098\000\
    \148\000\202\000\194\000\022\000\203\000\193\000\204\000\255\255\
    \022\000\089\000\205\000\079\000\206\000\255\255\035\000\110\000\
    \093\000\086\000\022\000\093\000\085\000\211\000\089\000\097\000\
    \022\000\097\000\096\000\212\000\097\000\095\000\039\000\213\000\
    \035\000\214\000\097\000\215\000\035\000\216\000\089\000\093\000\
    \043\000\089\000\092\000\101\000\139\000\255\255\093\000\086\000\
    \097\000\093\000\085\000\043\000\102\000\100\000\217\000\102\000\
    \110\000\098\000\255\255\089\000\107\000\089\000\089\000\218\000\
    \223\000\089\000\043\000\102\000\098\000\093\000\103\000\255\255\
    \092\000\255\255\224\000\102\000\225\000\102\000\102\000\051\000\
    \102\000\170\000\089\000\130\000\055\000\226\000\130\000\227\000\
    \051\000\196\000\089\000\089\000\051\000\089\000\055\000\089\000\
    \228\000\255\255\255\255\091\000\102\000\089\000\168\000\058\000\
    \156\000\167\000\130\000\155\000\105\000\255\255\255\255\130\000\
    \130\000\089\000\130\000\089\000\159\000\134\000\058\000\158\000\
    \134\000\108\000\255\255\145\000\229\000\255\255\089\000\159\000\
    \230\000\091\000\158\000\058\000\250\000\000\000\130\000\101\000\
    \255\255\000\000\159\000\000\000\134\000\158\000\108\000\000\000\
    \000\000\000\000\084\000\255\255\159\000\110\000\255\255\158\000\
    \130\000\112\000\255\255\168\000\112\000\244\000\167\000\183\000\
    \101\000\000\000\182\000\094\000\194\000\000\000\136\000\193\000\
    \255\255\255\255\000\000\255\255\000\000\108\000\146\000\112\000\
    \255\255\116\000\255\255\255\255\094\000\255\255\112\000\112\000\
    \112\000\094\000\114\000\112\000\115\000\000\000\255\255\000\000\
    \170\000\255\255\136\000\117\000\255\255\255\255\116\000\255\255\
    \133\000\112\000\255\255\000\000\255\255\000\000\154\000\255\255\
    \166\000\168\000\183\000\166\000\167\000\182\000\255\255\255\255\
    \117\000\255\255\157\000\000\000\255\255\094\000\255\255\116\000\
    \255\255\255\255\255\255\255\255\255\255\157\000\000\000\166\000\
    \094\000\255\255\255\255\255\255\255\255\000\000\255\255\183\000\
    \157\000\117\000\182\000\255\255\119\000\255\255\255\255\255\255\
    \255\255\255\255\157\000\196\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\134\000\120\000\084\000\
    \134\000\000\000\132\000\129\000\255\255\132\000\128\000\208\000\
    \094\000\255\255\207\000\255\255\255\255\255\255\208\000\255\255\
    \255\255\207\000\194\000\000\000\134\000\193\000\255\255\255\255\
    \255\255\132\000\000\000\255\255\220\000\084\000\255\255\219\000\
    \130\000\134\000\134\000\220\000\134\000\130\000\219\000\232\000\
    \232\000\255\255\231\000\231\000\000\000\000\000\000\000\181\000\
    \183\000\255\255\181\000\182\000\208\000\000\000\185\000\207\000\
    \134\000\250\000\000\000\000\000\249\000\238\000\238\000\000\000\
    \238\000\239\000\248\000\000\000\130\000\248\000\181\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\192\000\194\000\
    \133\000\192\000\193\000\185\000\238\000\131\000\255\255\206\000\
    \208\000\248\000\206\000\207\000\218\000\220\000\220\000\218\000\
    \219\000\219\000\000\000\230\000\232\000\192\000\230\000\231\000\
    \232\000\210\000\000\000\231\000\255\255\000\000\206\000\248\000\
    \210\000\000\000\248\000\218\000\133\000\236\000\236\000\000\000\
    \236\000\237\000\230\000\000\000\238\000\238\000\222\000\238\000\
    \239\000\255\255\000\000\000\000\000\000\222\000\248\000\112\000\
    \000\000\255\255\000\000\000\000\236\000\255\255\236\000\236\000\
    \000\000\236\000\237\000\238\000\236\000\236\000\255\255\236\000\
    \237\000\238\000\238\000\000\000\238\000\239\000\241\000\000\000\
    \000\000\241\000\000\000\000\000\000\000\236\000\000\000\000\000\
    \000\000\000\000\000\000\236\000\000\000\000\000\000\000\255\255\
    \238\000\000\000\000\000\255\255\241\000\000\000\255\255\000\000\
    \000\000\000\000\255\255\241\000\241\000\241\000\000\000\255\255\
    \241\000\000\000\247\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\241\000\255\255\
    \255\255\243\000\255\255\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\144\000\000\000\000\000\000\000\142\000\
    \000\000\127\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\143\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\000\000\255\255\000\000\
    \000\000\142\000\255\255\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\246\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\003\000\005\000\000\000\003\000\005\000\
    \006\000\006\000\007\000\006\000\006\000\009\000\009\000\014\000\
    \009\000\009\000\010\000\010\000\018\000\010\000\010\000\011\000\
    \011\000\030\000\011\000\011\000\085\000\032\000\040\000\006\000\
    \032\000\040\000\012\000\012\000\009\000\012\000\012\000\016\000\
    \016\000\010\000\016\000\016\000\017\000\017\000\011\000\017\000\
    \017\000\095\000\000\000\003\000\005\000\040\000\128\000\020\000\
    \020\000\012\000\020\000\020\000\021\000\021\000\016\000\021\000\
    \021\000\023\000\023\000\017\000\023\000\023\000\024\000\024\000\
    \065\000\024\000\024\000\067\000\025\000\025\000\020\000\025\000\
    \025\000\026\000\026\000\021\000\026\000\026\000\021\000\033\000\
    \023\000\073\000\033\000\027\000\027\000\024\000\027\000\027\000\
    \068\000\028\000\028\000\025\000\028\000\028\000\025\000\036\000\
    \026\000\037\000\036\000\026\000\037\000\038\000\033\000\069\000\
    \038\000\041\000\027\000\075\000\041\000\027\000\044\000\072\000\
    \028\000\044\000\033\000\028\000\045\000\140\000\036\000\045\000\
    \037\000\076\000\154\000\046\000\038\000\077\000\046\000\080\000\
    \041\000\157\000\036\000\047\000\037\000\044\000\047\000\160\000\
    \038\000\138\000\048\000\045\000\041\000\048\000\146\000\146\000\
    \049\000\044\000\046\000\049\000\147\000\052\000\161\000\045\000\
    \052\000\053\000\047\000\162\000\053\000\054\000\046\000\056\000\
    \054\000\048\000\056\000\163\000\141\000\164\000\047\000\049\000\
    \057\000\150\000\150\000\057\000\052\000\048\000\059\000\060\000\
    \053\000\059\000\060\000\049\000\054\000\165\000\056\000\061\000\
    \052\000\170\000\061\000\171\000\053\000\172\000\062\000\057\000\
    \054\000\062\000\116\000\119\000\063\000\059\000\060\000\063\000\
    \173\000\064\000\174\000\057\000\064\000\089\000\061\000\175\000\
    \089\000\059\000\060\000\081\000\081\000\062\000\081\000\081\000\
    \176\000\177\000\061\000\063\000\083\000\178\000\179\000\083\000\
    \064\000\062\000\180\000\100\000\089\000\087\000\100\000\063\000\
    \087\000\185\000\081\000\101\000\064\000\081\000\101\000\186\000\
    \000\000\003\000\005\000\015\000\019\000\090\000\104\000\006\000\
    \090\000\104\000\100\000\105\000\009\000\014\000\105\000\187\000\
    \108\000\010\000\018\000\108\000\081\000\065\000\011\000\131\000\
    \067\000\188\000\131\000\032\000\083\000\040\000\189\000\133\000\
    \102\000\012\000\133\000\102\000\100\000\087\000\016\000\073\000\
    \190\000\136\000\191\000\017\000\136\000\068\000\091\000\092\000\
    \089\000\091\000\092\000\196\000\197\000\090\000\020\000\102\000\
    \198\000\199\000\098\000\021\000\069\000\098\000\083\000\167\000\
    \023\000\075\000\167\000\200\000\072\000\024\000\100\000\087\000\
    \147\000\201\000\193\000\025\000\202\000\193\000\203\000\076\000\
    \026\000\102\000\204\000\077\000\205\000\080\000\033\000\090\000\
    \088\000\088\000\027\000\088\000\088\000\210\000\091\000\092\000\
    \028\000\097\000\097\000\211\000\097\000\097\000\036\000\212\000\
    \037\000\213\000\098\000\214\000\038\000\215\000\107\000\088\000\
    \041\000\107\000\088\000\102\000\138\000\044\000\093\000\093\000\
    \097\000\093\000\093\000\045\000\099\000\099\000\216\000\099\000\
    \091\000\092\000\046\000\106\000\106\000\107\000\106\000\217\000\
    \222\000\088\000\047\000\110\000\098\000\093\000\110\000\141\000\
    \093\000\048\000\223\000\099\000\224\000\103\000\103\000\049\000\
    \103\000\167\000\106\000\130\000\052\000\225\000\130\000\226\000\
    \053\000\193\000\109\000\109\000\054\000\109\000\056\000\093\000\
    \227\000\116\000\119\000\088\000\103\000\099\000\168\000\057\000\
    \152\000\168\000\130\000\152\000\097\000\059\000\060\000\137\000\
    \137\000\109\000\137\000\110\000\155\000\132\000\061\000\155\000\
    \132\000\107\000\143\000\143\000\228\000\062\000\103\000\156\000\
    \229\000\093\000\156\000\063\000\249\000\255\255\137\000\099\000\
    \064\000\255\255\158\000\255\255\132\000\158\000\106\000\255\255\
    \255\255\255\255\081\000\113\000\159\000\110\000\113\000\159\000\
    \132\000\111\000\083\000\169\000\111\000\243\000\169\000\184\000\
    \103\000\255\255\184\000\087\000\194\000\255\255\130\000\194\000\
    \114\000\113\000\255\255\114\000\255\255\109\000\143\000\111\000\
    \113\000\113\000\113\000\090\000\104\000\113\000\111\000\111\000\
    \111\000\105\000\111\000\111\000\111\000\255\255\114\000\255\255\
    \168\000\115\000\137\000\113\000\115\000\114\000\114\000\114\000\
    \132\000\111\000\114\000\255\255\117\000\255\255\152\000\117\000\
    \166\000\166\000\182\000\166\000\166\000\182\000\118\000\115\000\
    \114\000\118\000\155\000\255\255\091\000\092\000\115\000\115\000\
    \115\000\120\000\117\000\115\000\120\000\156\000\255\255\166\000\
    \098\000\117\000\117\000\117\000\118\000\255\255\117\000\183\000\
    \158\000\115\000\183\000\118\000\118\000\118\000\121\000\120\000\
    \118\000\121\000\159\000\194\000\117\000\255\255\120\000\120\000\
    \120\000\123\000\255\255\120\000\123\000\134\000\118\000\088\000\
    \134\000\255\255\125\000\125\000\121\000\125\000\125\000\207\000\
    \097\000\120\000\207\000\121\000\121\000\121\000\208\000\123\000\
    \121\000\208\000\195\000\255\255\134\000\195\000\123\000\123\000\
    \123\000\125\000\255\255\123\000\219\000\093\000\121\000\219\000\
    \134\000\135\000\135\000\220\000\135\000\125\000\220\000\231\000\
    \232\000\123\000\231\000\232\000\255\255\255\255\255\255\181\000\
    \181\000\110\000\181\000\181\000\209\000\255\255\182\000\209\000\
    \135\000\247\000\255\255\255\255\247\000\238\000\238\000\255\255\
    \238\000\238\000\248\000\255\255\135\000\248\000\181\000\255\255\
    \255\255\255\255\143\000\255\255\255\255\255\255\192\000\192\000\
    \134\000\192\000\192\000\183\000\238\000\125\000\152\000\206\000\
    \206\000\248\000\206\000\206\000\218\000\218\000\221\000\218\000\
    \218\000\221\000\255\255\230\000\230\000\192\000\230\000\230\000\
    \233\000\207\000\255\255\233\000\243\000\255\255\206\000\245\000\
    \208\000\255\255\245\000\218\000\135\000\234\000\234\000\255\255\
    \234\000\234\000\230\000\255\255\235\000\235\000\219\000\235\000\
    \235\000\113\000\255\255\255\255\255\255\220\000\245\000\111\000\
    \255\255\169\000\255\255\255\255\234\000\184\000\236\000\236\000\
    \255\255\236\000\236\000\235\000\237\000\237\000\114\000\237\000\
    \237\000\239\000\239\000\255\255\239\000\239\000\240\000\255\255\
    \255\255\240\000\255\255\255\255\255\255\236\000\255\255\255\255\
    \255\255\255\255\255\255\237\000\255\255\255\255\255\255\115\000\
    \239\000\255\255\255\255\242\000\240\000\255\255\242\000\255\255\
    \255\255\255\255\117\000\240\000\240\000\240\000\255\255\166\000\
    \240\000\255\255\245\000\255\255\118\000\255\255\255\255\255\255\
    \255\255\242\000\255\255\255\255\255\255\255\255\240\000\120\000\
    \242\000\242\000\242\000\255\255\255\255\242\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\242\000\121\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\123\000\
    \255\255\255\255\255\255\142\000\255\255\255\255\255\255\142\000\
    \255\255\125\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\255\255\255\255\255\255\
    \195\000\255\255\255\255\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\255\255\181\000\255\255\
    \255\255\142\000\209\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\192\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\206\000\255\255\
    \255\255\255\255\255\255\218\000\221\000\255\255\255\255\255\255\
    \255\255\255\255\230\000\255\255\255\255\255\255\233\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\245\000\255\255\
    \255\255\255\255\255\255\255\255\234\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\235\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\236\000\255\255\255\255\
    \255\255\255\255\255\255\237\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\240\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\242\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\002\000\006\000\000\000\000\000\000\000\
    \000\000\007\000\000\000\000\000\008\000\012\000\000\000\000\000\
    \000\000\017\000\033\000\038\000\043\000\000\000\000\000\000\000\
    \000\000\045\000\000\000\000\000\049\000\050\000\051\000\018\000\
    \000\000\020\000\000\000\000\000\059\000\022\000\060\000\023\000\
    \000\000\064\000\000\000\000\000\075\000\088\000\089\000\018\000\
    \000\000\090\000\000\000\000\000\094\000\103\000\104\000\105\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\118\000\000\000\128\000\000\000\000\000\000\000\129\000\
    \142\000\012\000\130\000\135\000\143\000\148\000\000\000\000\000\
    \000\000\000\000\149\000\157\000\159\000\018\000\166\000\172\000\
    \000\000\000\000\187\000\193\000\013\000\199\000\160\000\031\000\
    \000\000\000\000\216\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\201\000\000\000\000\000\
    \000\000\000\000\000\000\075\000\227\000\182\000\233\000\234\000\
    \000\000\000\000\000\000\000\000\001\000\000\000\120\001\000\000\
    \000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\020\000\002\001\000\000\
    \000\000\184\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\021\000\007\001\000\000\000\000\
    \248\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
    \012\001\000\000\000\000\013\001\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\028\000\020\001\000\000\
    \000\000\018\001\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\032\000\028\001\000\000\000\000\033\001\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\047\000\044\001\000\000\
    \000\000\045\001\053\001\058\001\068\001\074\001\000\000\000\000\
    \069\001\000\000\082\001\069\000\033\001\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_backtrk_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
    \026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\079\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\126\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\126\000\000\000\000\000\
    \000\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\232\000\
    \232\000\000\000\001\001\001\001\001\001\006\001\001\001\001\001\
    \000\000\000\000\028\001\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_default_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\000\000\000\000\007\000\007\000\007\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\000\000\000\000\007\000\007\000\007\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\000\000\041\000\000\000\000\000\000\000\041\000\
    \029\000\000\000\029\000\029\000\029\000\041\000\000\000\000\000\
    \000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
    \000\000\000\000\151\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\159\000\000\000\
    \000\000\159\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\172\000\000\000\000\000\
    \172\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \185\000\000\000\000\000\185\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\198\000\000\000\
    \000\000\198\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\211\000\000\000\000\000\211\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\224\000\000\000\
    \000\000\224\000\023\000\023\000\023\000\011\001\000\000\000\000\
    \025\001\000\000\025\001\133\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_trans_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\086\000\
    \001\000\001\000\001\000\001\000\133\000\001\000\001\000\133\000\
    \001\000\001\000\001\000\000\000\000\000\000\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\010\000\001\000\
    \001\000\010\000\000\000\010\000\010\000\000\000\010\000\010\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\010\000\023\000\001\000\010\000\010\000\154\000\167\000\
    \180\000\000\000\010\000\010\000\000\000\001\000\193\000\000\000\
    \001\000\000\000\206\000\001\000\001\000\000\000\000\000\000\000\
    \010\000\010\000\010\000\001\000\010\000\010\000\001\000\023\000\
    \057\000\219\000\023\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\023\000\001\000\001\000\023\000\001\000\000\000\000\000\
    \010\000\010\000\001\000\000\000\000\000\000\000\023\000\034\000\
    \000\000\000\000\034\000\000\000\000\000\000\000\023\000\001\000\
    \023\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\096\000\000\000\023\000\096\000\023\000\034\000\067\000\
    \000\000\000\000\067\000\000\000\000\000\106\000\000\000\133\000\
    \106\000\000\000\133\000\000\000\000\000\000\000\133\000\133\000\
    \133\000\133\000\146\000\133\000\000\000\146\000\067\000\133\000\
    \000\000\000\000\133\000\000\000\106\000\133\000\133\000\000\000\
    \133\000\000\000\000\000\057\000\086\000\133\000\000\000\133\000\
    \001\000\101\000\000\000\001\000\086\000\000\000\133\000\086\000\
    \000\000\000\000\086\000\000\000\133\000\086\000\086\000\136\000\
    \086\000\086\000\001\000\086\000\000\000\001\000\000\000\086\000\
    \000\000\086\000\086\000\086\000\048\000\060\000\089\000\000\000\
    \086\000\086\000\000\000\000\000\000\000\000\000\086\000\086\000\
    \000\000\001\000\074\000\074\000\001\000\000\000\000\000\001\000\
    \115\000\139\000\001\000\001\000\001\000\001\000\001\000\000\000\
    \000\000\000\000\000\000\000\000\089\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\001\000\162\000\000\000\000\000\162\000\000\000\
    \175\000\000\000\000\000\175\000\000\000\188\000\000\000\000\000\
    \188\000\000\000\000\000\000\000\000\000\201\000\000\000\000\000\
    \201\000\000\000\162\000\000\000\000\000\214\000\000\000\175\000\
    \214\000\000\000\000\000\000\000\188\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\201\000\227\000\000\000\000\000\
    \227\000\000\000\000\000\000\000\214\000\000\000\010\000\010\000\
    \000\000\010\000\029\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\227\000\010\000\010\000\000\000\
    \010\000\029\000\000\000\010\000\010\000\010\000\010\000\016\001\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
    \000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\000\000\000\000\000\000\000\000\001\000\
    \000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check_code = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\006\000\010\000\011\000\006\000\010\000\011\000\012\000\
    \017\000\020\000\012\000\017\000\020\000\021\000\021\000\108\000\
    \021\000\021\000\025\000\025\000\101\000\025\000\025\000\101\000\
    \006\000\010\000\011\000\255\255\255\255\255\255\012\000\017\000\
    \020\000\140\000\026\000\026\000\021\000\026\000\026\000\027\000\
    \027\000\025\000\027\000\027\000\028\000\028\000\033\000\028\000\
    \028\000\033\000\036\000\037\000\038\000\036\000\037\000\038\000\
    \041\000\026\000\045\000\047\000\044\000\046\000\027\000\044\000\
    \046\000\049\000\111\000\028\000\049\000\033\000\165\000\180\000\
    \191\000\036\000\037\000\038\000\052\000\131\000\205\000\052\000\
    \131\000\033\000\217\000\044\000\046\000\036\000\037\000\038\000\
    \049\000\053\000\054\000\057\000\053\000\054\000\057\000\060\000\
    \089\000\229\000\060\000\052\000\049\000\255\255\243\000\255\255\
    \061\000\062\000\063\000\061\000\062\000\063\000\255\255\052\000\
    \053\000\054\000\057\000\255\255\255\255\255\255\060\000\081\000\
    \081\000\255\255\081\000\081\000\053\000\054\000\057\000\061\000\
    \062\000\063\000\083\000\087\000\090\000\083\000\087\000\090\000\
    \255\255\091\000\255\255\061\000\091\000\063\000\081\000\088\000\
    \088\000\092\000\088\000\088\000\092\000\093\000\093\000\098\000\
    \093\000\093\000\098\000\255\255\255\255\255\255\099\000\099\000\
    \100\000\099\000\110\000\100\000\255\255\110\000\088\000\102\000\
    \081\000\255\255\102\000\255\255\093\000\103\000\103\000\255\255\
    \103\000\255\255\083\000\087\000\090\000\099\000\255\255\100\000\
    \133\000\091\000\169\000\133\000\106\000\169\000\102\000\106\000\
    \088\000\092\000\107\000\255\255\103\000\107\000\093\000\098\000\
    \109\000\109\000\125\000\109\000\255\255\125\000\255\255\099\000\
    \255\255\100\000\110\000\106\000\083\000\087\000\090\000\255\255\
    \102\000\107\000\114\000\255\255\255\255\114\000\103\000\109\000\
    \255\255\125\000\088\000\092\000\132\000\255\255\255\255\132\000\
    \093\000\098\000\134\000\135\000\135\000\134\000\135\000\255\255\
    \114\000\255\255\255\255\255\255\110\000\255\255\255\255\114\000\
    \114\000\114\000\184\000\132\000\114\000\184\000\255\255\255\255\
    \255\255\134\000\135\000\166\000\166\000\255\255\166\000\166\000\
    \181\000\181\000\114\000\181\000\181\000\192\000\192\000\195\000\
    \192\000\192\000\195\000\255\255\209\000\206\000\206\000\209\000\
    \206\000\206\000\166\000\255\255\255\255\218\000\218\000\181\000\
    \218\000\218\000\255\255\221\000\192\000\033\000\221\000\255\255\
    \255\255\036\000\037\000\038\000\206\000\230\000\230\000\233\000\
    \230\000\230\000\233\000\255\255\218\000\255\255\234\000\234\000\
    \049\000\234\000\234\000\235\000\235\000\243\000\235\000\235\000\
    \255\255\255\255\255\255\052\000\230\000\236\000\236\000\240\000\
    \236\000\236\000\240\000\237\000\237\000\234\000\237\000\237\000\
    \053\000\054\000\235\000\255\255\242\000\255\255\255\255\242\000\
    \255\255\255\255\255\255\255\255\236\000\240\000\255\255\255\255\
    \255\255\255\255\237\000\255\255\240\000\240\000\240\000\255\255\
    \255\255\240\000\242\000\255\255\255\255\255\255\081\000\255\255\
    \255\255\242\000\242\000\242\000\255\255\255\255\242\000\240\000\
    \083\000\087\000\090\000\255\255\255\255\255\255\255\255\091\000\
    \255\255\255\255\255\255\255\255\242\000\255\255\088\000\092\000\
    \255\255\255\255\255\255\255\255\093\000\098\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \110\000\255\255\255\255\255\255\255\255\142\000\255\255\255\255\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \169\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\255\255\255\255\255\255\255\255\142\000\
    \114\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\255\255\255\255\255\255\255\255\255\255\
    \184\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\166\000\255\255\255\255\255\255\255\255\181\000\
    \255\255\255\255\255\255\255\255\192\000\195\000\255\255\255\255\
    \255\255\255\255\209\000\255\255\206\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\218\000\255\255\255\255\255\255\
    \255\255\221\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\230\000\233\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\234\000\255\255\255\255\
    \255\255\255\255\235\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\236\000\240\000\255\255\255\255\
    \255\255\255\255\237\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\242\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_code = 
   "\255\001\255\255\000\001\255\004\255\255\003\255\002\255\255\000\
    \003\255\000\002\001\004\255\002\255\255\000\002\255\005\255\004\
    \255\255\006\255\005\255\004\255\255\005\255\006\003\004\255\255\
    \007\004\005\255\006\003\004\255\255\006\003\255\005\255\006\003\
    \007\255\255\005\255\004\255\003\255\255\007\255\005\255\255\002\
    \005\000\003\001\004\255\003\006\255\007\004\005\255\004\255\255\
    \005\255\006\003\255\003\006\004\007\255\006\003\005\255\003\255\
    \004\255\255\008\003\003\006\006\008\005\255\007\255\255\002\005\
    \000\006\001\004\255\005\255\255\004\007\255\004\007\005\255\007\
    \255\255\005\255\004\007\255\001\002\255\013\255\012\255\255\013\
    \255\255\012\255\013\255\255\015\255\014\255\255\015\255\255\014\
    \255\015\255\255\017\255\016\255\255\017\255\255\016\255\017\255\
    \255\019\255\018\255\255\019\255\255\018\255\019\255\255\021\255\
    \020\255\255\021\255\255\020\255\021\255\255\023\255\022\255\255\
    \023\255\255\022\255\023\255\255\004\016\005\017\000\012\001\013\
    \008\020\009\021\010\022\011\023\002\014\003\015\006\018\007\019\
    \255\000\003\001\002\255\000\005\001\004\255\003\005\002\255\255\
    \003\005\002\004\005\255\004\255\255\003\255\255\002\255\000\003\
    \255\002\004\001\005\000\003\255";
}

let rec ocamldep_output source lexbuf =
    __ocaml_lex_ocamldep_output_rec source lexbuf 0
and __ocaml_lex_ocamldep_output_rec source lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 55 "lexers.mll"
                            k
# 684 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 55 "lexers.mll"
                                   ( let x = (k, space_sep_strings_nl source lexbuf) in x :: ocamldep_output source lexbuf )
# 688 "lexers.ml"

  | 1 ->
# 56 "lexers.mll"
        ( [] )
# 693 "lexers.ml"

  | 2 ->
# 57 "lexers.mll"
      ( error source lexbuf "Expecting colon followed by space-separated module name list" )
# 698 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_ocamldep_output_rec source lexbuf __ocaml_lex_state

and space_sep_strings_nl source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_space_sep_strings_nl_rec source lexbuf 6
and __ocaml_lex_space_sep_strings_nl_rec source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 60 "lexers.mll"
                          word
# 713 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 60 "lexers.mll"
                                ( word :: space_sep_strings_nl source lexbuf )
# 717 "lexers.ml"

  | 1 ->
# 61 "lexers.mll"
                   ( Lexing.new_line lexbuf; [] )
# 722 "lexers.ml"

  | 2 ->
# 62 "lexers.mll"
      ( error source lexbuf "Expecting space-separated strings terminated with newline" )
# 727 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_space_sep_strings_nl_rec source lexbuf __ocaml_lex_state

and space_sep_strings source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_space_sep_strings_rec source lexbuf 12
and __ocaml_lex_space_sep_strings_rec source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 65 "lexers.mll"
                          word
# 742 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 65 "lexers.mll"
                                ( word :: space_sep_strings source lexbuf )
# 746 "lexers.ml"

  | 1 ->
# 66 "lexers.mll"
                        ( [] )
# 751 "lexers.ml"

  | 2 ->
# 67 "lexers.mll"
      ( error source lexbuf "Expecting space-separated strings" )
# 756 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_space_sep_strings_rec source lexbuf __ocaml_lex_state

and blank_sep_strings source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_blank_sep_strings_rec source lexbuf 21
and __ocaml_lex_blank_sep_strings_rec source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 70 "lexers.mll"
                                    ( blank_sep_strings source lexbuf )
# 770 "lexers.ml"

  | 1 ->
# 71 "lexers.mll"
                                ( [] )
# 775 "lexers.ml"

  | 2 ->
let
# 72 "lexers.mll"
                          word
# 781 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 72 "lexers.mll"
                                ( word :: blank_sep_strings source lexbuf )
# 785 "lexers.ml"

  | 3 ->
# 73 "lexers.mll"
               ( [] )
# 790 "lexers.ml"

  | 4 ->
# 74 "lexers.mll"
      ( error source lexbuf "Expecting blank-separated strings" )
# 795 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_blank_sep_strings_rec source lexbuf __ocaml_lex_state

and comma_sep_strings source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 5 (-1) ; (* L=2 [3] <- p ; [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_comma_sep_strings_rec source lexbuf 33
and __ocaml_lex_comma_sep_strings_rec source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 77 "lexers.mll"
                                    word
# 811 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1) in
# 77 "lexers.mll"
                                                     ( [word] )
# 815 "lexers.ml"

  | 1 ->
let
# 78 "lexers.mll"
                                    word
# 821 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 78 "lexers.mll"
                                          ( word :: comma_sep_strings_aux source lexbuf )
# 825 "lexers.ml"

  | 2 ->
# 79 "lexers.mll"
               ( [] )
# 830 "lexers.ml"

  | 3 ->
# 80 "lexers.mll"
      ( error source lexbuf "Expecting comma-separated strings (1)" )
# 835 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comma_sep_strings_rec source lexbuf __ocaml_lex_state

and comma_sep_strings_aux source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1) ;   __ocaml_lex_comma_sep_strings_aux_rec source lexbuf 41
and __ocaml_lex_comma_sep_strings_aux_rec source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 82 "lexers.mll"
                                               word
# 848 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 82 "lexers.mll"
                                                     ( word :: comma_sep_strings_aux source lexbuf )
# 852 "lexers.ml"

  | 1 ->
# 83 "lexers.mll"
               ( [] )
# 857 "lexers.ml"

  | 2 ->
# 84 "lexers.mll"
      ( error source lexbuf "Expecting comma-separated strings (2)" )
# 862 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comma_sep_strings_aux_rec source lexbuf __ocaml_lex_state

and comma_or_blank_sep_strings source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 5 (-1) ; (* L=2 [3] <- p ; [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_comma_or_blank_sep_strings_rec source lexbuf 49
and __ocaml_lex_comma_or_blank_sep_strings_rec source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 87 "lexers.mll"
                                    word
# 878 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1) in
# 87 "lexers.mll"
                                                     ( [word] )
# 882 "lexers.ml"

  | 1 ->
let
# 88 "lexers.mll"
                                    word
# 888 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 88 "lexers.mll"
                                          ( word :: comma_or_blank_sep_strings_aux source lexbuf )
# 892 "lexers.ml"

  | 2 ->
# 89 "lexers.mll"
               ( [] )
# 897 "lexers.ml"

  | 3 ->
# 90 "lexers.mll"
      ( error source lexbuf "Expecting (comma|blank)-separated strings (1)" )
# 902 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comma_or_blank_sep_strings_rec source lexbuf __ocaml_lex_state

and comma_or_blank_sep_strings_aux source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 3 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_comma_or_blank_sep_strings_aux_rec source lexbuf 57
and __ocaml_lex_comma_or_blank_sep_strings_aux_rec source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 92 "lexers.mll"
                                               word
# 917 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 92 "lexers.mll"
                                                     ( word :: comma_or_blank_sep_strings_aux source lexbuf )
# 921 "lexers.ml"

  | 1 ->
let
# 93 "lexers.mll"
                                    word
# 927 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 93 "lexers.mll"
                                          ( word :: comma_or_blank_sep_strings_aux source lexbuf )
# 931 "lexers.ml"

  | 2 ->
# 94 "lexers.mll"
               ( [] )
# 936 "lexers.ml"

  | 3 ->
# 95 "lexers.mll"
      ( error source lexbuf "Expecting (comma|blank)-separated strings (2)" )
# 941 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comma_or_blank_sep_strings_aux_rec source lexbuf __ocaml_lex_state

and parse_environment_path_w source lexbuf =
    __ocaml_lex_parse_environment_path_w_rec source lexbuf 65
and __ocaml_lex_parse_environment_path_w_rec source lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 98 "lexers.mll"
                 word
# 954 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 98 "lexers.mll"
                       ( word :: parse_environment_path_aux_w source lexbuf )
# 958 "lexers.ml"

  | 1 ->
let
# 99 "lexers.mll"
                     word
# 964 "lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 99 "lexers.mll"
                           ( "" :: word :: parse_environment_path_aux_w source lexbuf )
# 968 "lexers.ml"

  | 2 ->
# 100 "lexers.mll"
        ( [] )
# 973 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_parse_environment_path_w_rec source lexbuf __ocaml_lex_state

and parse_environment_path_aux_w source lexbuf =
    __ocaml_lex_parse_environment_path_aux_w_rec source lexbuf 69
and __ocaml_lex_parse_environment_path_aux_w_rec source lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 102 "lexers.mll"
                     word
# 986 "lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 102 "lexers.mll"
                           ( word :: parse_environment_path_aux_w source lexbuf )
# 990 "lexers.ml"

  | 1 ->
# 103 "lexers.mll"
        ( [] )
# 995 "lexers.ml"

  | 2 ->
# 104 "lexers.mll"
      ( error source lexbuf "Impossible: expecting colon-separated strings" )
# 1000 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_parse_environment_path_aux_w_rec source lexbuf __ocaml_lex_state

and parse_environment_path source lexbuf =
    __ocaml_lex_parse_environment_path_rec source lexbuf 73
and __ocaml_lex_parse_environment_path_rec source lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 107 "lexers.mll"
                 word
# 1013 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 107 "lexers.mll"
                       ( word :: parse_environment_path_aux source lexbuf )
# 1017 "lexers.ml"

  | 1 ->
let
# 108 "lexers.mll"
                     word
# 1023 "lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 108 "lexers.mll"
                           ( "" :: word :: parse_environment_path_aux source lexbuf )
# 1027 "lexers.ml"

  | 2 ->
# 109 "lexers.mll"
        ( [] )
# 1032 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_parse_environment_path_rec source lexbuf __ocaml_lex_state

and parse_environment_path_aux source lexbuf =
    __ocaml_lex_parse_environment_path_aux_rec source lexbuf 77
and __ocaml_lex_parse_environment_path_aux_rec source lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 111 "lexers.mll"
                     word
# 1045 "lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 111 "lexers.mll"
                           ( word :: parse_environment_path_aux source lexbuf )
# 1049 "lexers.ml"

  | 1 ->
# 112 "lexers.mll"
        ( [] )
# 1054 "lexers.ml"

  | 2 ->
# 113 "lexers.mll"
      ( error source lexbuf "Impossible: expecting colon-separated strings" )
# 1059 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_parse_environment_path_aux_rec source lexbuf __ocaml_lex_state

and conf_lines dir source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 9 (-1) ; (* L=1 [3] <- p ;  *)
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_conf_lines_rec dir source lexbuf 81
and __ocaml_lex_conf_lines_rec dir source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 116 "lexers.mll"
                                    ( Lexing.new_line lexbuf; conf_lines dir source lexbuf )
# 1073 "lexers.ml"

  | 1 ->
# 117 "lexers.mll"
                                ( [] )
# 1078 "lexers.ml"

  | 2 ->
# 118 "lexers.mll"
                   ( Lexing.new_line lexbuf; conf_lines dir source lexbuf )
# 1083 "lexers.ml"

  | 3 ->
# 119 "lexers.mll"
               ( [] )
# 1088 "lexers.ml"

  | 4 ->
let
# 120 "lexers.mll"
                                      k
# 1094 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1)
and
# 120 "lexers.mll"
                                                 s1
# 1099 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(1) lexbuf.Lexing.lex_mem.(2)
and
# 120 "lexers.mll"
                                                                 s2
# 1104 "lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(2) + 1) lexbuf.Lexing.lex_curr_pos in
# 121 "lexers.mll"
      (
        let bexpr =
          try Glob.parse ?dir k
          with exn -> error source lexbuf "Invalid globbing pattern %S" k (Printexc.to_string exn)
        in
        sublex (count_lines lexbuf) s1; sublex (count_lines lexbuf) s2;
        let v1 = conf_value empty source lexbuf in
        let v2 = conf_values v1 source lexbuf in
        let rest = conf_lines dir source lexbuf in (bexpr,v2) :: rest
      )
# 1117 "lexers.ml"

  | 5 ->
# 131 "lexers.mll"
      ( error source lexbuf "Invalid line syntax" )
# 1122 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_conf_lines_rec dir source lexbuf __ocaml_lex_state

and conf_value x source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 3 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_conf_value_rec x source lexbuf 111
and __ocaml_lex_conf_value_rec x source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 134 "lexers.mll"
                 tag
# 1137 "lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 134 "lexers.mll"
                      ( { (x) with minus_tags = locate source lexbuf tag :: x.minus_tags } )
# 1141 "lexers.ml"

  | 1 ->
let
# 135 "lexers.mll"
                 tag
# 1147 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 135 "lexers.mll"
                      ( { (x) with plus_tags = locate source lexbuf tag :: x.plus_tags } )
# 1151 "lexers.ml"

  | 2 ->
# 136 "lexers.mll"
              ( error source lexbuf "Invalid tag modifier only '+ or '-' are allowed as prefix for tag" )
# 1156 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_conf_value_rec x source lexbuf __ocaml_lex_state

and conf_values x source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_conf_values_rec x source lexbuf 125
and __ocaml_lex_conf_values_rec x source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 139 "lexers.mll"
            s1
# 1171 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 139 "lexers.mll"
                            s2
# 1176 "lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(0) + 1) lexbuf.Lexing.lex_curr_pos in
# 139 "lexers.mll"
                                (
      sublex (count_lines lexbuf) s1; sublex (count_lines lexbuf) s2;
      conf_values (conf_value x source lexbuf) source lexbuf
    )
# 1183 "lexers.ml"

  | 1 ->
# 143 "lexers.mll"
            ( Lexing.new_line lexbuf; x )
# 1188 "lexers.ml"

  | 2 ->
# 144 "lexers.mll"
        ( x )
# 1193 "lexers.ml"

  | 3 ->
# 145 "lexers.mll"
      ( error source lexbuf "Only ',' separated tags are alllowed" )
# 1198 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_conf_values_rec x source lexbuf __ocaml_lex_state

and path_scheme patt_allowed source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1) ;   __ocaml_lex_path_scheme_rec patt_allowed source lexbuf 138
and __ocaml_lex_path_scheme_rec patt_allowed source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 148 "lexers.mll"
                  prefix
# 1211 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 149 "lexers.mll"
      ( `Word prefix :: path_scheme patt_allowed source lexbuf )
# 1215 "lexers.ml"

  | 1 ->
let
# 150 "lexers.mll"
                      var
# 1221 "lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) (lexbuf.Lexing.lex_curr_pos + -1) in
# 151 "lexers.mll"
      ( `Var (var, Bool.True) :: path_scheme patt_allowed source lexbuf )
# 1225 "lexers.ml"

  | 2 ->
let
# 152 "lexers.mll"
                      var
# 1231 "lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_mem.(0)
and
# 152 "lexers.mll"
                                           patt
# 1236 "lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(0) + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 153 "lexers.mll"
      ( if patt_allowed then
          let patt = My_std.String.implode (unescape (Lexing.from_string patt)) in
          `Var (var, Glob.parse patt) :: path_scheme patt_allowed source lexbuf
        else
          error source lexbuf "Patterns are not allowed in this pathname (%%(%s:%s) only in ~prod)" var patt )
# 1244 "lexers.ml"

  | 3 ->
# 159 "lexers.mll"
      ( `Var ("", Bool.True) :: path_scheme patt_allowed source lexbuf )
# 1249 "lexers.ml"

  | 4 ->
# 161 "lexers.mll"
      ( [] )
# 1254 "lexers.ml"

  | 5 ->
# 162 "lexers.mll"
      ( error source lexbuf "Bad pathanme scheme" )
# 1259 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_path_scheme_rec patt_allowed source lexbuf __ocaml_lex_state

and unescape lexbuf =
    __ocaml_lex_unescape_rec lexbuf 147
and __ocaml_lex_unescape_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 165 "lexers.mll"
                       c
# 1272 "lexers.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 165 "lexers.mll"
                                 ( c :: unescape lexbuf )
# 1276 "lexers.ml"

  | 1 ->
let
# 166 "lexers.mll"
         c
# 1282 "lexers.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 166 "lexers.mll"
                                 ( c :: unescape lexbuf )
# 1286 "lexers.ml"

  | 2 ->
# 167 "lexers.mll"
                                 ( [] )
# 1291 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_unescape_rec lexbuf __ocaml_lex_state

and ocamlfind_query source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 24 (-1) ;   __ocaml_lex_ocamlfind_query_rec source lexbuf 152
and __ocaml_lex_ocamlfind_query_rec source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 171 "lexers.mll"
                                       n
# 1304 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1)
and
# 172 "lexers.mll"
                                           d
# 1309 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_mem.(3)
and
# 173 "lexers.mll"
                                       v
# 1314 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(4) lexbuf.Lexing.lex_mem.(5)
and
# 174 "lexers.mll"
                                          a
# 1319 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(6) lexbuf.Lexing.lex_mem.(7)
and
# 175 "lexers.mll"
                                        lo
# 1324 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(8) lexbuf.Lexing.lex_mem.(9)
and
# 176 "lexers.mll"
                                        l
# 1329 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(10) lexbuf.Lexing.lex_mem.(11) in
# 177 "lexers.mll"
    ( n, d, v, a, lo, l )
# 1333 "lexers.ml"

  | 1 ->
# 178 "lexers.mll"
      ( error source lexbuf "Bad ocamlfind query" )
# 1338 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_ocamlfind_query_rec source lexbuf __ocaml_lex_state

and trim_blanks source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 6 (-1) ; (* L=2 [3] <- p ; [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_trim_blanks_rec source lexbuf 234
and __ocaml_lex_trim_blanks_rec source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 181 "lexers.mll"
                          word
# 1354 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1) in
# 181 "lexers.mll"
                                       ( word )
# 1358 "lexers.ml"

  | 1 ->
# 182 "lexers.mll"
      ( error source lexbuf "Bad input for trim_blanks" )
# 1363 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_trim_blanks_rec source lexbuf __ocaml_lex_state

and tag_gen source lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 6 (-1) ;   __ocaml_lex_tag_gen_rec source lexbuf 240
and __ocaml_lex_tag_gen_rec source lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 185 "lexers.mll"
                name
# 1376 "lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 185 "lexers.mll"
                                       param
# 1381 "lexers.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_mem.(1) in
# 185 "lexers.mll"
                                                    ( name, param )
# 1385 "lexers.ml"

  | 1 ->
# 186 "lexers.mll"
      ( error source lexbuf "Not a valid parametrized tag" )
# 1390 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_tag_gen_rec source lexbuf __ocaml_lex_state

and count_lines lb lexbuf =
    __ocaml_lex_count_lines_rec lb lexbuf 245
and __ocaml_lex_count_lines_rec lb lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 189 "lexers.mll"
           ( count_lines lb lexbuf )
# 1402 "lexers.ml"

  | 1 ->
# 190 "lexers.mll"
                 ( Lexing.new_line lb; count_lines lb lexbuf )
# 1407 "lexers.ml"

  | 2 ->
# 191 "lexers.mll"
        ( () )
# 1412 "lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_count_lines_rec lb lexbuf __ocaml_lex_state

;;

