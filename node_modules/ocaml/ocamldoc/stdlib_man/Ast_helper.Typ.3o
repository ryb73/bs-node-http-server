.TH "Ast_helper.Typ" 3 2017-04-28 OCamldoc "OCaml library"
.SH NAME
Ast_helper.Typ \- Type expressions
.SH Module
Module   Ast_helper.Typ
.SH Documentation
.sp
Module
.BI "Typ"
 : 
.B sig  end

.sp
Type expressions

.sp

.sp
.sp

.I val mk 
: 
.B ?loc:Ast_helper.loc ->
.B   ?attrs:Ast_helper.attrs -> Parsetree.core_type_desc -> Parsetree.core_type
.sp

.sp

.I val attr 
: 
.B Parsetree.core_type -> Parsetree.attribute -> Parsetree.core_type
.sp

.sp

.I val any 
: 
.B ?loc:Ast_helper.loc -> ?attrs:Ast_helper.attrs -> unit -> Parsetree.core_type
.sp

.sp

.I val var 
: 
.B ?loc:Ast_helper.loc ->
.B   ?attrs:Ast_helper.attrs -> string -> Parsetree.core_type
.sp

.sp

.I val arrow 
: 
.B ?loc:Ast_helper.loc ->
.B   ?attrs:Ast_helper.attrs ->
.B   Asttypes.label ->
.B   Parsetree.core_type -> Parsetree.core_type -> Parsetree.core_type
.sp

.sp

.I val tuple 
: 
.B ?loc:Ast_helper.loc ->
.B   ?attrs:Ast_helper.attrs -> Parsetree.core_type list -> Parsetree.core_type
.sp

.sp

.I val constr 
: 
.B ?loc:Ast_helper.loc ->
.B   ?attrs:Ast_helper.attrs ->
.B   Ast_helper.lid -> Parsetree.core_type list -> Parsetree.core_type
.sp

.sp

.I val object_ 
: 
.B ?loc:Ast_helper.loc ->
.B   ?attrs:Ast_helper.attrs ->
.B   (string * Parsetree.attributes * Parsetree.core_type) list ->
.B   Asttypes.closed_flag -> Parsetree.core_type
.sp

.sp

.I val class_ 
: 
.B ?loc:Ast_helper.loc ->
.B   ?attrs:Ast_helper.attrs ->
.B   Ast_helper.lid -> Parsetree.core_type list -> Parsetree.core_type
.sp

.sp

.I val alias 
: 
.B ?loc:Ast_helper.loc ->
.B   ?attrs:Ast_helper.attrs ->
.B   Parsetree.core_type -> string -> Parsetree.core_type
.sp

.sp

.I val variant 
: 
.B ?loc:Ast_helper.loc ->
.B   ?attrs:Ast_helper.attrs ->
.B   Parsetree.row_field list ->
.B   Asttypes.closed_flag -> Asttypes.label list option -> Parsetree.core_type
.sp

.sp

.I val poly 
: 
.B ?loc:Ast_helper.loc ->
.B   ?attrs:Ast_helper.attrs ->
.B   string list -> Parsetree.core_type -> Parsetree.core_type
.sp

.sp

.I val package 
: 
.B ?loc:Ast_helper.loc ->
.B   ?attrs:Ast_helper.attrs ->
.B   Ast_helper.lid ->
.B   (Ast_helper.lid * Parsetree.core_type) list -> Parsetree.core_type
.sp

.sp

.I val extension 
: 
.B ?loc:Ast_helper.loc ->
.B   ?attrs:Ast_helper.attrs -> Parsetree.extension -> Parsetree.core_type
.sp

.sp

.I val force_poly 
: 
.B Parsetree.core_type -> Parsetree.core_type
.sp

.sp
