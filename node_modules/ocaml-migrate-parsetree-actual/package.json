{
  "_args": [
    [
      {
        "raw": "ocaml-migrate-parsetree-actual@git://github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
        "scope": null,
        "escapedName": "ocaml-migrate-parsetree-actual",
        "name": "ocaml-migrate-parsetree-actual",
        "rawSpec": "git://github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
        "spec": "git://github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:npm-opam/ocaml-migrate-parsetree.git#0.5.0",
          "sshUrl": "git+ssh://git@github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
          "httpsUrl": "git+https://github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
          "gitUrl": "git://github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
          "shortcut": "github:npm-opam/ocaml-migrate-parsetree#0.5.0",
          "directUrl": "https://raw.githubusercontent.com/npm-opam/ocaml-migrate-parsetree/0.5.0/package.json"
        }
      },
      "/Users/ryan/Personal/proj/bs-node-http-server/node_modules/@opam-alpha/ocaml-migrate-parsetree"
    ]
  ],
  "_from": "git://github.com/npm-opam/ocaml-migrate-parsetree.git#4bd4c57673a7a0df5c79089507adf61c943c3a28",
  "_id": "ocaml-migrate-parsetree-actual@0.5.0",
  "_inCache": true,
  "_location": "/ocaml-migrate-parsetree-actual",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ocaml-migrate-parsetree-actual@git://github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
    "scope": null,
    "escapedName": "ocaml-migrate-parsetree-actual",
    "name": "ocaml-migrate-parsetree-actual",
    "rawSpec": "git://github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
    "spec": "git://github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:npm-opam/ocaml-migrate-parsetree.git#0.5.0",
      "sshUrl": "git+ssh://git@github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
      "httpsUrl": "git+https://github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
      "gitUrl": "git://github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
      "shortcut": "github:npm-opam/ocaml-migrate-parsetree#0.5.0",
      "directUrl": "https://raw.githubusercontent.com/npm-opam/ocaml-migrate-parsetree/0.5.0/package.json"
    }
  },
  "_requiredBy": [
    "/@opam-alpha/ocaml-migrate-parsetree"
  ],
  "_resolved": "git://github.com/npm-opam/ocaml-migrate-parsetree.git#4bd4c57673a7a0df5c79089507adf61c943c3a28",
  "_shasum": "142133e1e8e637412ca4f89354801c77feaff8c4",
  "_shrinkwrap": null,
  "_spec": "ocaml-migrate-parsetree-actual@git://github.com/npm-opam/ocaml-migrate-parsetree.git#0.5.0",
  "_where": "/Users/ryan/Personal/proj/bs-node-http-server/node_modules/@opam-alpha/ocaml-migrate-parsetree",
  "dependencies": {
    "@opam-alpha/jbuilder": ">= 1.0.0",
    "@opam-alpha/ocamlfind": "*",
    "@opam-alpha/result": "*",
    "dependency-env": "*",
    "nopam": "*",
    "opam-installer-bin": "git+https://github.com/yunxing/opam-installer-bin.git",
    "substs": "git+https://github.com/yunxing/substs.git"
  },
  "description": "Convert OCaml parsetrees between different major versions",
  "devDependencies": {},
  "exportedEnvVars": {
    "CAML_LD_LIBRARY_PATH": {
      "global": true,
      "resolveAsRelativePath": true,
      "globalCollisionBehavior": "joinPath",
      "val": "./_build/ocamlfind/lib/stublibs"
    },
    "ocaml_migrate_parsetree_installed": {
      "global": true,
      "globalCollisionBehavior": "clobber",
      "val": "true"
    },
    "FINDLIB": {
      "global": true,
      "resolveAsRelativePath": true,
      "globalCollisionBehavior": "joinPath",
      "val": "./_build/ocamlfind/lib"
    },
    "version": {
      "global": true,
      "globalCollisionBehavior": "clobber",
      "val": "0.5.0"
    },
    "ocaml_migrate_parsetree_version": {
      "global": true,
      "globalCollisionBehavior": "clobber",
      "val": "0.5.0"
    },
    "ocaml_migrate_parsetree_enable": {
      "global": true,
      "globalCollisionBehavior": "clobber",
      "val": "enable"
    },
    "PATH": {
      "global": true,
      "resolveAsRelativePath": true,
      "globalCollisionBehavior": "joinPath",
      "val": "./_build/ocamlfind/bin"
    }
  },
  "gitHead": "4bd4c57673a7a0df5c79089507adf61c943c3a28",
  "name": "ocaml-migrate-parsetree-actual",
  "optionalDependencies": {},
  "peerDependencies": {
    "@opam-alpha/ocaml": ">= 4.02.0"
  },
  "readme": "# OCaml-migrate-parsetree\nConvert OCaml parsetrees between different major versions\n\nThis library converts between parsetrees of different OCaml versions.\n\nSupported versions are 4.02, 4.03, 4.04, 4.05 and 4.06 (trunk).\nFor each version, there is a snapshot of the parsetree and conversion functions\nto the next and/or previous version.\n\nNote that there is no snapshot for 4.06 since the parsetree hasn't changed\nyet.\n\n## Asts\n\n```ocaml\nmodule Ast_402, Ast_403, Ast_404, Ast_405 : sig\n\n  (* These two modules didn't change between compiler versions.\n     Just share the ones from compiler-libs. *)\n  module Location = Location\n  module Longident = Longident\n\n  (* Version specific copy of AST *)\n  module Asttypes\n  module Parsetree\n  module Outcometree\n\n  (* Other modules that are useful for implementing PPX.\n\n     Docstrings and Ast_mapper only contain general definitions\n     In particular, the internal state used by compiler-libs has been\n     removed.\n     Also equalities are lost for abstract types (Docstring.docstring).  *)\n  module Docstrings\n  module Ast_helper\n  module Ast_mapper\n\n  (* Magic numbers used for marshalling *)\n  module Config : sig\n    val ast_impl_magic_number : string\n    val ast_intf_magic_number : string\n  end\nend\n```\n\nThese embed copies of AST definitions for each supported OCaml major version.\n\nThe AST matching the version of the OCaml toolchain will contain equalities\nrelating the copy of types to the definitions from compiler-libs.  For\ninstance, when installed with OCaml 4.04.x, `Ast_404.Parsetree` looks\nlike.\n\n## Migration modules\n\nFor each pair of versions `$(n)` and `$(n+1)`, the two modules\n`Migrate_parsetree_$(n)_$(n+1)` and `Migrate_parsetree_$(n+1)_$(n)` convert the AST forward and backward.\n\nThe forward conversion is total while the backward conversion is partial: when\na feature is not available in a previous version of the parsetree, a\n`Migrate_parsetree_def.Migration_error` exception is raised detailing the\nfailure case.\n\n`Migrate_parsetree_versions` abstract versions of the compiler. Each version is\nrepresented as a module with `OCaml_version` signature.  Instances are named\n`OCaml_402`, `OCaml_403`, ... `OCaml_current` is an alias to the version of the\ncurrent compiler.\nThe `Convert` functor takes two versions of OCaml and produce conversion\nfunctions.\n\nFinally, the `Migrate_parsetree_ast_io` provides an easy interface for\nmarshalling/unmarshalling.\n\n## Migrate_parsetree.Driver\n\nThe `Migrate_parsetree.Driver` provides an API for ppx rewriters to\nregister OCaml AST rewriters. Ppx rewriters using this API can be used\nas standalone rewriter executable or as part of a _driver_ including\nseveral rewriters.\n\nUsing a single driver for several rewritings has the advantage that it\nis faster. Especially when using many ppx rewriters, it can speed up\ncompilation a lot.\n\nIf using [Jbuilder](https://github.com/janestreet/jbuilder), you can\nconsult the Jbuilder manual to see how to define and use ppx\nrewriters. Jbuilder automatically creates drivers based on\nocaml-migrate-parsetree on demand.\n\nThe rest of this section describes how to do things manually or with\n[ocamlbuild](https://github.com/ocaml/ocamlbuild).\n\n## Building a custom driver using ocamlfind\n\nTo build a custom driver using ocamlfind, simply link all the ppx\nrewriter libraries together with the\n`ocaml-migrate-parsetree.driver-main` package at the end:\n\n    ocamlfind ocamlopt -predicates ppx_driver -o ppx -linkpkg \\\n      -package ppx_sexp_conv -package ppx_bin_prot \\\n      -package ocaml-migrate-parsetree.driver-main\n\nNormally, ocaml-migrate-parsetree based rewriters should be build with\nthe approriate `-linkall` option on individual libraries. If one is\nmissing this option, the rewriter might not get linked in. If this is\nthe case, a workaround is to pass `-linkall` when linking the custom\ndriver.\n\nThe resulting `ppx` program can be used as follow:\n\n- `./ppx file.ml` to print the transformed code\n- `ocamlc -pp './ppx --dump-ast' ...` to use it as a pre-processor\n- `ocamlc -ppx './ppx --as-ppx' ...` to use it as a `-ppx` rewriter\n\n### Using the ocaml-migrate-parsetree driver with ocamlbuild\n\nThe ocaml-migrate-parsetree-ocamlbuild package provides an ocamlbuild\nplugin to help building and using custom drivers on demand.\n\n#### Setup\n\nTo use it you need to first tell ocamlbuild to use the plugin in\n`myocamlbuild.ml`. If you are using oasis, add this to your `_oasis`\nfile:\n\n```\nAlphaFeatures:         ocamlbuild_more_args\nXOCamlbuildPluginTags: package(ocaml-migrate-parsetree-ocamlbuild)\n```\n\nIf you are calling ocamlbuild directly, you need to call it this way:\n\n```\n$ ocamlbuild -plugin-tag \"package(ocaml-migrate-parsetree-ocamlbuild)\" ...\n```\n\nOnce you have done that, you need to enable it in your myocamlbuild.ml:\n\n```ocaml\nlet () =\n  Ocamlbuild_plugin.dispatch (fun hook ->\n    Ocaml_migrate_parsetree_ocamlbuild.dispatch hook;\n    <other dispatch functions>\n  )\n```\n\n#### Usage\n\nThe plugin provides a new parametric tag: `omp-driver`. The tag takes\nas argument a `+` separated list of rewriters (as findlib package\nnames) followed by any command line arguments.\n\nFor instance to use `ppx_sexp_conv` and `ppx_bin_prot` put this in\nyour tags file:\n\n```\n<**/*>: predicate(custom_ppx)\n<src/*.{ml,mli}>: omp-driver(ppx_sexp_conv+ppx_bin_prot)\n```\n\nThe first line is to instruct ocamlfind not to automatically add\nimplicit `-ppx` argument. Without this, you might still get individual\n`-ppx` for both `ppx_sexp_conv` and `ppx_bin_prot` in addition to the\nmain driver that already contains them both, meaning your code would\nbe transformed more than it should...\n\n# Development\n\nIt started from the work of Alain Frisch in\n[ppx\\_tools](https://github.com/alainfrisch/ppx_tools).\n\nThe library is distributed under LGPL 2.1 and is copyright INRIA.\n\n## Adding a new OCaml version\n\nWe use [Cinaps](https://github.com/janestreet/cinaps) to generate boilerplate.\nTry `opam install cinaps`.  If it is not available, you might need to pin the\npackage:\n`opam pin add jbuilder --dev-repo`\n`opam pin add cinaps https://github.com/janestreet/cinaps.git`\n\nAdd the new version in\n[src/cinaps.ml](https://github.com/let-def/ocaml-migrate-parsetree/blob/master/src/cinaps.ml)\n`supported_versions`.\n\nSnapshot the ast in file \"asts/ast\\_NEW.ml\".\n* Define the modules `Location` and `Longident` as aliases to corresponding\n  modules from compiler-libs.\n* Copy `Asttypes`, `Parsetree`, `Outcometree`, `Docstrings`, `Ast_helper` and\n  `Ast_mapper` from the upstream files in `parsing/` directory.\n* Global state and definitions referencing external values should be removed\n  from `Docstrings` and `Ast_mapper`. Take a look at existing snapshots.\n* Create a `Config` module containing `ast_impl_magic_number`\n  `ast_impl_magic_number` from upstream `Config`\n* Call `tools/add_special_comments.native` on the file\n\nAdd migration functions:\n- Manually compile the ast (`ocamlc -c ast_NEW.ml`)\n- Using `gencopy` from [ppx\\_tools](https://github.com/alainfrisch/ppx_tools), generate copy code to and from previous version (assuming it is 404):\n```\ngencopy -I . -map Ast_404:Ast_NEW Ast_404.Parsetree.expression Ast_404.Parsetree.toplevel_phrase Ast_404.Outcometree.out_phrase > migrate_parsetree_404_NEW_migrate.ml\ngencopy -I . -map Ast_NEW:Ast_404 Ast_NEW.Parsetree.expression Ast_NEW.Parsetree.toplevel_phrase Ast_NEW.Outcometree.out_phrase > migrate_parsetree_NEW_404_migrate.ml\n```\n- Fix the generated code by implementing new cases\n- By default generated code use very long identifiers, simplify unambiguous ones (e.g. `copy_Ast_NEW_Parsetree_structure` -> `copy_structure`). The migration functor expects specific names, look at `Migrate_parsetree_versions` interface.\n\n*TODO*: specialize and improve gencopy for these cases\n\nAdd mapper lifting functions in the files `migrate_parsetree_NEW_404.ml` and\n`migrate_parsetree_404_NEW.ml`:\n- include the corresponding `Migrate_parsetree_40x_40y_migrate` module\n- define `copy_mapper` function, look at existing `Migrate_parsetree_40x_40y`\n  for guidance.\n\nAt any time, you can expand boilerplate code by running `make cinaps`.\n\nUpdate build system:\n- in [Makefile](Makefile), add \"src/ast\\_NEW.ml\" to `OCAML_ASTS` and migration modules to `OBJECTS`\n- make sure `make cinaps` reach a fixed point :)\n- Update dependencies with `make depend`\n- `make` should succeed\n",
  "readmeFilename": "README.md",
  "scripts": {
    "postinstall": "eval $(dependencyEnv) && nopam && jbuilder build --only-packages ocaml-migrate-parsetree --root . -j 4 @install && (opam-installer --prefix=$opam_prefix || true)"
  },
  "version": "0.5.0"
}
